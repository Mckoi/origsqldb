/* Generated By:JavaCC: Do not edit this line. SQLTokenManager.java */
package com.mckoi.database.sql;
import com.mckoi.database.TType;
import com.mckoi.database.Assignment;
import com.mckoi.database.JoiningSet;
import com.mckoi.database.Expression;
import com.mckoi.database.Variable;
import com.mckoi.database.FunctionDef;
import com.mckoi.database.FunctionFactory;
import com.mckoi.database.Operator;
import com.mckoi.database.StatementTree;
import com.mckoi.database.ParameterSubstitution;
import com.mckoi.database.global.*;
import com.mckoi.database.interpret.*;
import com.mckoi.database.TObject;
import java.util.ArrayList;
import java.util.Stack;

public class SQLTokenManager implements SQLConstants
{
  public  java.io.PrintStream debugStream = System.out;
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private final int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 9:
         jjmatchedKind = 2;
         return jjMoveNfa_0(5, 0);
      case 10:
         jjmatchedKind = 3;
         return jjMoveNfa_0(5, 0);
      case 13:
         jjmatchedKind = 4;
         return jjMoveNfa_0(5, 0);
      case 32:
         jjmatchedKind = 1;
         return jjMoveNfa_0(5, 0);
      case 40:
         jjmatchedKind = 208;
         return jjMoveNfa_0(5, 0);
      case 41:
         jjmatchedKind = 209;
         return jjMoveNfa_0(5, 0);
      case 42:
         jjmatchedKind = 7;
         return jjMoveNfa_0(5, 0);
      case 43:
         jjmatchedKind = 16;
         return jjMoveNfa_0(5, 0);
      case 44:
         jjmatchedKind = 210;
         return jjMoveNfa_0(5, 0);
      case 45:
         jjmatchedKind = 17;
         return jjMoveNfa_0(5, 0);
      case 47:
         jjmatchedKind = 15;
         return jjMoveNfa_0(5, 0);
      case 59:
         jjmatchedKind = 207;
         return jjMoveNfa_0(5, 0);
      case 60:
         jjmatchedKind = 11;
         return jjMoveStringLiteralDfa1_0(0x2000L, 0x0L, 0x0L, 0x0L);
      case 61:
         jjmatchedKind = 8;
         return jjMoveStringLiteralDfa1_0(0x200L, 0x0L, 0x0L, 0x0L);
      case 62:
         jjmatchedKind = 10;
         return jjMoveStringLiteralDfa1_0(0x1000L, 0x0L, 0x0L, 0x0L);
      case 63:
         jjmatchedKind = 204;
         return jjMoveNfa_0(5, 0);
      case 65:
         return jjMoveStringLiteralDfa1_0(0x4984001000000L, 0x40010000080L, 0x4008000000000000L, 0x0L);
      case 66:
         return jjMoveStringLiteralDfa1_0(0x80000000000000L, 0x200004000000L, 0x12411000000L, 0x0L);
      case 67:
         return jjMoveStringLiteralDfa1_0(0x400000c8000000L, 0x4010000141a08L, 0xf00000028410082L, 0x0L);
      case 68:
         return jjMoveStringLiteralDfa1_0(0x800000810400000L, 0x3000800000000000L, 0x8880000100L, 0x0L);
      case 69:
         return jjMoveStringLiteralDfa1_0(0x20000100000000L, 0x2001200000000L, 0x0L, 0x0L);
      case 70:
         return jjMoveStringLiteralDfa1_0(0x208000000000000L, 0x20000000000000L, 0x200800800L, 0x0L);
      case 71:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x400000020800000L, 0x8000L, 0x0L);
      case 72:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x4000000000L, 0x0L, 0x0L);
      case 73:
         return jjMoveStringLiteralDfa1_0(0x1000012020000000L, 0x8000000400030000L, 0x4000210602cL, 0x1L);
      case 74:
         return jjMoveStringLiteralDfa1_0(0x2000000000000000L, 0x40L, 0x800000000000L, 0x0L);
      case 75:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x1000L, 0x0L);
      case 76:
         return jjMoveStringLiteralDfa1_0(0x400000000000000L, 0x4000080000008011L, 0x1003000000000000L, 0x0L);
      case 77:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x18000000000000L, 0x0L, 0x0L);
      case 78:
         return jjMoveStringLiteralDfa1_0(0x2040000100000L, 0x100000000020L, 0x4000200000L, 0x2L);
      case 79:
         return jjMoveStringLiteralDfa1_0(0x1008400000000L, 0x800000080080000L, 0x8000000000000000L, 0x0L);
      case 80:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x100000100000000L, 0x20441L, 0x0L);
      case 82:
         return jjMoveStringLiteralDfa1_0(0x10000200000000L, 0x80020042002000L, 0x2070000004000200L, 0x0L);
      case 83:
         return jjMoveStringLiteralDfa1_0(0x100201002800000L, 0x40000800000100L, 0x80101000040000L, 0x0L);
      case 84:
         return jjMoveStringLiteralDfa1_0(0x4000020000000000L, 0x200400000004000L, 0x4420140080010L, 0x0L);
      case 85:
         return jjMoveStringLiteralDfa1_0(0x400004000000L, 0x8009600004L, 0x0L, 0x0L);
      case 86:
         return jjMoveStringLiteralDfa1_0(0x8000000000000000L, 0x1002000000000L, 0x280000000000L, 0x0L);
      case 87:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x402L, 0x0L, 0x0L);
      case 97:
         return jjMoveStringLiteralDfa1_0(0x4984001000000L, 0x40010000080L, 0x4008000000000000L, 0x0L);
      case 98:
         return jjMoveStringLiteralDfa1_0(0x80000000000000L, 0x200004000000L, 0x12411000000L, 0x0L);
      case 99:
         return jjMoveStringLiteralDfa1_0(0x400000c8000000L, 0x4010000141a08L, 0xf00000028410082L, 0x0L);
      case 100:
         return jjMoveStringLiteralDfa1_0(0x800000810400000L, 0x3000800000000000L, 0x8880000100L, 0x0L);
      case 101:
         return jjMoveStringLiteralDfa1_0(0x20000100000000L, 0x2001200000000L, 0x0L, 0x0L);
      case 102:
         return jjMoveStringLiteralDfa1_0(0x208000000000000L, 0x20000000000000L, 0x200800800L, 0x0L);
      case 103:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x400000020800000L, 0x8000L, 0x0L);
      case 104:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x4000000000L, 0x0L, 0x0L);
      case 105:
         return jjMoveStringLiteralDfa1_0(0x1000012020000000L, 0x8000000400030000L, 0x4000210602cL, 0x1L);
      case 106:
         return jjMoveStringLiteralDfa1_0(0x2000000000000000L, 0x40L, 0x800000000000L, 0x0L);
      case 107:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x1000L, 0x0L);
      case 108:
         return jjMoveStringLiteralDfa1_0(0x400000000000000L, 0x4000080000008011L, 0x1003000000000000L, 0x0L);
      case 109:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x18000000000000L, 0x0L, 0x0L);
      case 110:
         return jjMoveStringLiteralDfa1_0(0x2040000100000L, 0x100000000020L, 0x4000200000L, 0x2L);
      case 111:
         return jjMoveStringLiteralDfa1_0(0x1008400000000L, 0x800000080080000L, 0x8000000000000000L, 0x0L);
      case 112:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x100000100000000L, 0x20441L, 0x0L);
      case 114:
         return jjMoveStringLiteralDfa1_0(0x10000200000000L, 0x80020042002000L, 0x2070000004000200L, 0x0L);
      case 115:
         return jjMoveStringLiteralDfa1_0(0x100201002800000L, 0x40000800000100L, 0x80101000040000L, 0x0L);
      case 116:
         return jjMoveStringLiteralDfa1_0(0x4000020000000000L, 0x200400000004000L, 0x4420140080010L, 0x0L);
      case 117:
         return jjMoveStringLiteralDfa1_0(0x400004000000L, 0x8009600004L, 0x0L, 0x0L);
      case 118:
         return jjMoveStringLiteralDfa1_0(0x8000000000000000L, 0x1002000000000L, 0x280000000000L, 0x0L);
      case 119:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x402L, 0x0L, 0x0L);
      case 124:
         return jjMoveStringLiteralDfa1_0(0x40000L, 0x0L, 0x0L, 0x0L);
      default :
         return jjMoveNfa_0(5, 0);
   }
}
private final int jjMoveStringLiteralDfa1_0(long active0, long active1, long active2, long active3)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(5, 0);
   }
   switch(curChar)
   {
      case 61:
         if ((active0 & 0x200L) != 0L)
         {
            jjmatchedKind = 9;
            jjmatchedPos = 1;
         }
         else if ((active0 & 0x1000L) != 0L)
         {
            jjmatchedKind = 12;
            jjmatchedPos = 1;
         }
         else if ((active0 & 0x2000L) != 0L)
         {
            jjmatchedKind = 13;
            jjmatchedPos = 1;
         }
         break;
      case 65:
         return jjMoveStringLiteralDfa2_0(active0, 0x60000000000000L, active1, 0x4115106000005068L, active2, 0x100a80080400000L, active3, 0L);
      case 67:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x40810000000L, active2, 0L, active3, 0L);
      case 68:
         return jjMoveStringLiteralDfa2_0(active0, 0x4000000000000L, active1, 0L, active2, 0x100000L, active3, 0L);
      case 69:
         return jjMoveStringLiteralDfa2_0(active0, 0xc02200812000000L, active1, 0x10c0aa0046000000L, active2, 0x20f00080440c1310L, active3, 0L);
      case 70:
         if ((active0 & 0x10000000000L) != 0L)
         {
            jjmatchedKind = 40;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x80L, active2, 0L, active3, 0L);
      case 71:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x400000000L, active2, 0L, active3, 0L);
      case 72:
         return jjMoveStringLiteralDfa2_0(active0, 0x1000800000L, active1, 0x100400L, active2, 0x20000002L, active3, 0L);
      case 73:
         return jjMoveStringLiteralDfa2_0(active0, 0x8000000000000000L, active1, 0x200800000000a002L, active2, 0x1000422501000000L, active3, 0L);
      case 76:
         return jjMoveStringLiteralDfa2_0(active0, 0x1080001000000L, active1, 0L, active2, 0x218000000L, active3, 0L);
      case 77:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0x100000000004L, active3, 0L);
      case 78:
         if ((active0 & 0x8000000000L) != 0L)
         {
            jjmatchedKind = 39;
            jjmatchedPos = 1;
         }
         else if ((active3 & 0x1L) != 0L)
         {
            jjmatchedKind = 192;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x1000100020000000L, active1, 0x8000008008430000L, active2, 0x4000040002006028L, active3, 0L);
      case 79:
         if ((active0 & 0x20000000000L) != 0L)
         {
            jjmatchedKind = 41;
            jjmatchedPos = 1;
         }
         else if ((active0 & 0x40000000000L) != 0L)
         {
            jjmatchedKind = 42;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x21980002c0000000L, active1, 0x10000000211L, active2, 0x3010800210880L, active3, 0x2L);
      case 80:
         return jjMoveStringLiteralDfa2_0(active0, 0x404000000L, active1, 0x80000000L, active2, 0L, active3, 0L);
      case 82:
         if ((active2 & 0x8000000000000000L) != 0L)
         {
            jjmatchedKind = 191;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x4200000008400000L, active1, 0xe00400020840000L, active2, 0x4000000028441L, active3, 0L);
      case 83:
         if ((active0 & 0x2000000000L) != 0L)
         {
            jjmatchedKind = 37;
            jjmatchedPos = 1;
         }
         else if ((active0 & 0x4000000000L) != 0L)
         {
            jjmatchedKind = 38;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0xc00000000000L, active1, 0x1200004L, active2, 0L, active3, 0L);
      case 84:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x100L, active2, 0x1000000000L, active3, 0L);
      case 85:
         return jjMoveStringLiteralDfa2_0(active0, 0x100000L, active1, 0x20000100080000L, active2, 0xe08004000800000L, active3, 0L);
      case 88:
         return jjMoveStringLiteralDfa2_0(active0, 0x100000000L, active1, 0x2001200000000L, active2, 0L, active3, 0L);
      case 89:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x800L, active2, 0L, active3, 0L);
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x60000000000000L, active1, 0x4115106000005068L, active2, 0x100a80080400000L, active3, 0L);
      case 99:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x40810000000L, active2, 0L, active3, 0L);
      case 100:
         return jjMoveStringLiteralDfa2_0(active0, 0x4000000000000L, active1, 0L, active2, 0x100000L, active3, 0L);
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0xc02200812000000L, active1, 0x10c0aa0046000000L, active2, 0x20f00080440c1310L, active3, 0L);
      case 102:
         if ((active0 & 0x10000000000L) != 0L)
         {
            jjmatchedKind = 40;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x80L, active2, 0L, active3, 0L);
      case 103:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x400000000L, active2, 0L, active3, 0L);
      case 104:
         return jjMoveStringLiteralDfa2_0(active0, 0x1000800000L, active1, 0x100400L, active2, 0x20000002L, active3, 0L);
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0x8000000000000000L, active1, 0x200800000000a002L, active2, 0x1000422501000000L, active3, 0L);
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0x1080001000000L, active1, 0L, active2, 0x218000000L, active3, 0L);
      case 109:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0x100000000004L, active3, 0L);
      case 110:
         if ((active0 & 0x8000000000L) != 0L)
         {
            jjmatchedKind = 39;
            jjmatchedPos = 1;
         }
         else if ((active3 & 0x1L) != 0L)
         {
            jjmatchedKind = 192;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x1000100020000000L, active1, 0x8000008008430000L, active2, 0x4000040002006028L, active3, 0L);
      case 111:
         if ((active0 & 0x20000000000L) != 0L)
         {
            jjmatchedKind = 41;
            jjmatchedPos = 1;
         }
         else if ((active0 & 0x40000000000L) != 0L)
         {
            jjmatchedKind = 42;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x21980002c0000000L, active1, 0x10000000211L, active2, 0x3010800210880L, active3, 0x2L);
      case 112:
         return jjMoveStringLiteralDfa2_0(active0, 0x404000000L, active1, 0x80000000L, active2, 0L, active3, 0L);
      case 114:
         if ((active2 & 0x8000000000000000L) != 0L)
         {
            jjmatchedKind = 191;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x4200000008400000L, active1, 0xe00400020840000L, active2, 0x4000000028441L, active3, 0L);
      case 115:
         if ((active0 & 0x2000000000L) != 0L)
         {
            jjmatchedKind = 37;
            jjmatchedPos = 1;
         }
         else if ((active0 & 0x4000000000L) != 0L)
         {
            jjmatchedKind = 38;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0xc00000000000L, active1, 0x1200004L, active2, 0L, active3, 0L);
      case 116:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x100L, active2, 0x1000000000L, active3, 0L);
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0x100000L, active1, 0x20000100080000L, active2, 0xe08004000800000L, active3, 0L);
      case 120:
         return jjMoveStringLiteralDfa2_0(active0, 0x100000000L, active1, 0x2001200000000L, active2, 0L, active3, 0L);
      case 121:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x800L, active2, 0L, active3, 0L);
      case 124:
         if ((active0 & 0x40000L) != 0L)
         {
            jjmatchedKind = 18;
            jjmatchedPos = 1;
         }
         break;
      default :
         break;
   }
   return jjMoveNfa_0(5, 1);
}
private final int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3)) == 0L)
      return jjMoveNfa_0(5, 1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(5, 1);
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x200080001800100L, active2, 0x34100024000002L, active3, 0L);
      case 66:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x100004000L, active2, 0L, active3, 0L);
      case 67:
         if ((active0 & 0x800000000000L) != 0L)
         {
            jjmatchedKind = 47;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x20000000000000L, active1, 0x8000040200001801L, active2, 0x8000040000L, active3, 0L);
      case 68:
         if ((active0 & 0x1000000000000L) != 0L)
         {
            jjmatchedKind = 48;
            jjmatchedPos = 2;
         }
         else if ((active0 & 0x4000000000000L) != 0L)
         {
            jjmatchedKind = 50;
            jjmatchedPos = 2;
         }
         else if ((active2 & 0x4000000000000000L) != 0L)
         {
            jjmatchedKind = 190;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x4000000L, active1, 0x800000000020000L, active2, 0x6000L, active3, 0L);
      case 69:
         if ((active0 & 0x400000000000L) != 0L)
         {
            jjmatchedKind = 46;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x8000000008000000L, active1, 0x2000000100404L, active2, 0x100000L, active3, 0L);
      case 70:
         return jjMoveStringLiteralDfa3_0(active0, 0x400000000000000L, active1, 0x1000800004000000L, active2, 0x300L, active3, 0L);
      case 71:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x2000L, active2, 0x2000000400000000L, active3, 0L);
      case 72:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x800000000L, active2, 0L, active3, 0L);
      case 73:
         return jjMoveStringLiteralDfa3_0(active0, 0x6000000000000000L, active1, 0x409000600000L, active2, 0x20448L, active3, 0L);
      case 75:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0x1000000000000000L, active3, 0L);
      case 76:
         if ((active0 & 0x80000000000L) != 0L)
         {
            jjmatchedKind = 43;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x40000212100000L, active1, 0x4012008000000L, active2, 0x810000L, active3, 0L);
      case 77:
         return jjMoveStringLiteralDfa3_0(active0, 0x1000000c0000000L, active1, 0x8020L, active2, 0x404100000014L, active3, 0L);
      case 78:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x4028000400010010L, active2, 0x3022000400080L, active3, 0L);
      case 79:
         return jjMoveStringLiteralDfa3_0(active0, 0x200000000c00000L, active1, 0x400000020040000L, active2, 0x10218008001L, active3, 0L);
      case 80:
         return jjMoveStringLiteralDfa3_0(active0, 0x100000000L, active1, 0L, active2, 0x40000000000000L, active3, 0L);
      case 81:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x40000000000000L, active2, 0L, active3, 0L);
      case 82:
         if ((active0 & 0x8000000000000L) != 0L)
         {
            jjmatchedKind = 51;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x1000000000000L, active2, 0xe80281000080800L, active3, 0L);
      case 83:
         return jjMoveStringLiteralDfa3_0(active0, 0x800000820000000L, active1, 0x2180000000000008L, active2, 0x100000000000000L, active3, 0L);
      case 84:
         if ((active0 & 0x200000000000L) != 0L)
         {
            jjmatchedKind = 45;
            jjmatchedPos = 2;
         }
         else if ((active2 & 0x1000000L) != 0L)
         {
            jjmatchedKind = 152;
            jjmatchedPos = 2;
         }
         else if ((active2 & 0x2000000L) != 0L)
         {
            jjmatchedKind = 153;
            jjmatchedPos = 2;
         }
         else if ((active3 & 0x2L) != 0L)
         {
            jjmatchedKind = 193;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x1080000401000000L, active1, 0x320092080082L, active2, 0x8040080000020L, active3, 0L);
      case 85:
         return jjMoveStringLiteralDfa3_0(active0, 0x1000000000L, active1, 0x200L, active2, 0x800000000L, active3, 0L);
      case 86:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x4040000040L, active2, 0x800000000000L, active3, 0L);
      case 87:
         if ((active0 & 0x2000000000000L) != 0L)
         {
            jjmatchedKind = 49;
            jjmatchedPos = 2;
         }
         else if ((active0 & 0x10000000000000L) != 0L)
         {
            jjmatchedKind = 52;
            jjmatchedPos = 2;
         }
         break;
      case 88:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x10000000000000L, active2, 0x40000000L, active3, 0L);
      case 89:
         if ((active0 & 0x100000000000L) != 0L)
         {
            jjmatchedKind = 44;
            jjmatchedPos = 2;
         }
         else if ((active2 & 0x1000L) != 0L)
         {
            jjmatchedKind = 140;
            jjmatchedPos = 2;
         }
         break;
      case 95:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0x200000L, active3, 0L);
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x200080001800100L, active2, 0x34100024000002L, active3, 0L);
      case 98:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x100004000L, active2, 0L, active3, 0L);
      case 99:
         if ((active0 & 0x800000000000L) != 0L)
         {
            jjmatchedKind = 47;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x20000000000000L, active1, 0x8000040200001801L, active2, 0x8000040000L, active3, 0L);
      case 100:
         if ((active0 & 0x1000000000000L) != 0L)
         {
            jjmatchedKind = 48;
            jjmatchedPos = 2;
         }
         else if ((active0 & 0x4000000000000L) != 0L)
         {
            jjmatchedKind = 50;
            jjmatchedPos = 2;
         }
         else if ((active2 & 0x4000000000000000L) != 0L)
         {
            jjmatchedKind = 190;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x4000000L, active1, 0x800000000020000L, active2, 0x6000L, active3, 0L);
      case 101:
         if ((active0 & 0x400000000000L) != 0L)
         {
            jjmatchedKind = 46;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x8000000008000000L, active1, 0x2000000100404L, active2, 0x100000L, active3, 0L);
      case 102:
         return jjMoveStringLiteralDfa3_0(active0, 0x400000000000000L, active1, 0x1000800004000000L, active2, 0x300L, active3, 0L);
      case 103:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x2000L, active2, 0x2000000400000000L, active3, 0L);
      case 104:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x800000000L, active2, 0L, active3, 0L);
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0x6000000000000000L, active1, 0x409000600000L, active2, 0x20448L, active3, 0L);
      case 107:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0x1000000000000000L, active3, 0L);
      case 108:
         if ((active0 & 0x80000000000L) != 0L)
         {
            jjmatchedKind = 43;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x40000212100000L, active1, 0x4012008000000L, active2, 0x810000L, active3, 0L);
      case 109:
         return jjMoveStringLiteralDfa3_0(active0, 0x1000000c0000000L, active1, 0x8020L, active2, 0x404100000014L, active3, 0L);
      case 110:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x4028000400010010L, active2, 0x3022000400080L, active3, 0L);
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0x200000000c00000L, active1, 0x400000020040000L, active2, 0x10218008001L, active3, 0L);
      case 112:
         return jjMoveStringLiteralDfa3_0(active0, 0x100000000L, active1, 0L, active2, 0x40000000000000L, active3, 0L);
      case 113:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x40000000000000L, active2, 0L, active3, 0L);
      case 114:
         if ((active0 & 0x8000000000000L) != 0L)
         {
            jjmatchedKind = 51;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x1000000000000L, active2, 0xe80281000080800L, active3, 0L);
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0x800000820000000L, active1, 0x2180000000000008L, active2, 0x100000000000000L, active3, 0L);
      case 116:
         if ((active0 & 0x200000000000L) != 0L)
         {
            jjmatchedKind = 45;
            jjmatchedPos = 2;
         }
         else if ((active2 & 0x1000000L) != 0L)
         {
            jjmatchedKind = 152;
            jjmatchedPos = 2;
         }
         else if ((active2 & 0x2000000L) != 0L)
         {
            jjmatchedKind = 153;
            jjmatchedPos = 2;
         }
         else if ((active3 & 0x2L) != 0L)
         {
            jjmatchedKind = 193;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x1080000401000000L, active1, 0x320092080082L, active2, 0x8040080000020L, active3, 0L);
      case 117:
         return jjMoveStringLiteralDfa3_0(active0, 0x1000000000L, active1, 0x200L, active2, 0x800000000L, active3, 0L);
      case 118:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x4040000040L, active2, 0x800000000000L, active3, 0L);
      case 119:
         if ((active0 & 0x2000000000000L) != 0L)
         {
            jjmatchedKind = 49;
            jjmatchedPos = 2;
         }
         else if ((active0 & 0x10000000000000L) != 0L)
         {
            jjmatchedKind = 52;
            jjmatchedPos = 2;
         }
         break;
      case 120:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x10000000000000L, active2, 0x40000000L, active3, 0L);
      case 121:
         if ((active0 & 0x100000000000L) != 0L)
         {
            jjmatchedKind = 44;
            jjmatchedPos = 2;
         }
         else if ((active2 & 0x1000L) != 0L)
         {
            jjmatchedKind = 140;
            jjmatchedPos = 2;
         }
         break;
      default :
         break;
   }
   return jjMoveNfa_0(5, 2);
}
private final int jjMoveStringLiteralDfa3_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3)) == 0L)
      return jjMoveNfa_0(5, 2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(5, 2);
   }
   switch(curChar)
   {
      case 65:
         if ((active1 & 0x40L) != 0L)
         {
            jjmatchedKind = 70;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0xc000000L, active1, 0x800000000000L, active2, 0x802200000000L);
      case 66:
         if ((active2 & 0x8000000L) != 0L)
         {
            jjmatchedKind = 155;
            jjmatchedPos = 3;
         }
         else if ((active2 & 0x10000000L) != 0L)
         {
            jjmatchedKind = 156;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0L, active2, 0x200800000000L);
      case 67:
         if ((active0 & 0x800000000000000L) != 0L)
         {
            jjmatchedKind = 59;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x800000000L, active1, 0x22000000100000L, active2, 0x100080000000001L);
      case 68:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x80000000000L, active2, 0x30000000200000L);
      case 69:
         if ((active0 & 0x100000000000000L) != 0L)
         {
            jjmatchedKind = 56;
            jjmatchedPos = 3;
         }
         else if ((active1 & 0x20L) != 0L)
         {
            jjmatchedKind = 69;
            jjmatchedPos = 3;
         }
         else if ((active2 & 0x80000000L) != 0L)
         {
            jjmatchedKind = 159;
            jjmatchedPos = 3;
         }
         else if ((active2 & 0x100000000L) != 0L)
         {
            jjmatchedKind = 160;
            jjmatchedPos = 3;
         }
         else if ((active2 & 0x1000000000000000L) != 0L)
         {
            jjmatchedKind = 188;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x33000000L, active1, 0x1800000a000b0080L, active2, 0x2040444000006b24L);
      case 71:
         if ((active1 & 0x10L) != 0L)
         {
            jjmatchedKind = 68;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x4000400001000000L, active2, 0x3000000000000L);
      case 72:
         if ((active0 & 0x20000000000000L) != 0L)
         {
            jjmatchedKind = 53;
            jjmatchedPos = 3;
         }
         else if ((active0 & 0x80000000000000L) != 0L)
         {
            jjmatchedKind = 55;
            jjmatchedPos = 3;
         }
         else if ((active1 & 0x2L) != 0L)
         {
            jjmatchedKind = 65;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x3000L, active2, 0L);
      case 73:
         return jjMoveStringLiteralDfa4_0(active0, 0x400000000L, active1, 0x200004090008000L, active2, 0x80009400000000L);
      case 75:
         if ((active1 & 0x1L) != 0L)
         {
            jjmatchedKind = 64;
            jjmatchedPos = 3;
         }
         break;
      case 76:
         if ((active0 & 0x100000L) != 0L)
         {
            jjmatchedKind = 20;
            jjmatchedPos = 3;
         }
         else if ((active0 & 0x40000000000000L) != 0L)
         {
            jjmatchedKind = 54;
            jjmatchedPos = 3;
         }
         else if ((active2 & 0x4000000L) != 0L)
         {
            jjmatchedKind = 154;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x300000000L, active1, 0x4000100004800L, active2, 0x110000810000L);
      case 77:
         if ((active0 & 0x200000000000000L) != 0L)
         {
            jjmatchedKind = 57;
            jjmatchedPos = 3;
         }
         else if ((active0 & 0x4000000000000000L) != 0L)
         {
            jjmatchedKind = 62;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x40000000L, active1, 0L, active2, 0x20400L);
      case 78:
         if ((active0 & 0x2000000000000000L) != 0L)
         {
            jjmatchedKind = 61;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0xa00200L, active2, 0x4000000100000L);
      case 79:
         if ((active0 & 0x1000000000000000L) != 0L)
         {
            jjmatchedKind = 60;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x4044c400000L, active2, 0x8000000440000L);
      case 80:
         if ((active0 & 0x400000L) != 0L)
         {
            jjmatchedKind = 22;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x80000000L, active1, 0L, active2, 0x10L);
      case 81:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x8000000000L, active2, 0L);
      case 82:
         if ((active1 & 0x4L) != 0L)
         {
            jjmatchedKind = 66;
            jjmatchedPos = 3;
         }
         else if ((active2 & 0x20000000L) != 0L)
         {
            jjmatchedKind = 157;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x8000000000000500L, active2, 0xe00000000000002L);
      case 83:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x100001000040000L, active2, 0x80L);
      case 84:
         if ((active0 & 0x400000000000000L) != 0L)
         {
            jjmatchedKind = 58;
            jjmatchedPos = 3;
         }
         else if ((active1 & 0x8L) != 0L)
         {
            jjmatchedKind = 67;
            jjmatchedPos = 3;
         }
         else if ((active2 & 0x40000000L) != 0L)
         {
            jjmatchedKind = 158;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x1000000000L, active1, 0x2080000000000000L, active2, 0x80008L);
      case 85:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x440132022000000L, active2, 0x8000L);
      case 86:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x18000000000000L, active2, 0x40L);
      case 87:
         if ((active0 & 0x800000L) != 0L)
         {
            jjmatchedKind = 23;
            jjmatchedPos = 3;
         }
         else if ((active0 & 0x8000000000000000L) != 0L)
         {
            jjmatchedKind = 63;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x200000000000L, active2, 0L);
      case 89:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x1000000000000L, active2, 0x20000000000L);
      case 97:
         if ((active1 & 0x40L) != 0L)
         {
            jjmatchedKind = 70;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0xc000000L, active1, 0x800000000000L, active2, 0x802200000000L);
      case 98:
         if ((active2 & 0x8000000L) != 0L)
         {
            jjmatchedKind = 155;
            jjmatchedPos = 3;
         }
         else if ((active2 & 0x10000000L) != 0L)
         {
            jjmatchedKind = 156;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0L, active2, 0x200800000000L);
      case 99:
         if ((active0 & 0x800000000000000L) != 0L)
         {
            jjmatchedKind = 59;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x800000000L, active1, 0x22000000100000L, active2, 0x100080000000001L);
      case 100:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x80000000000L, active2, 0x30000000200000L);
      case 101:
         if ((active0 & 0x100000000000000L) != 0L)
         {
            jjmatchedKind = 56;
            jjmatchedPos = 3;
         }
         else if ((active1 & 0x20L) != 0L)
         {
            jjmatchedKind = 69;
            jjmatchedPos = 3;
         }
         else if ((active2 & 0x80000000L) != 0L)
         {
            jjmatchedKind = 159;
            jjmatchedPos = 3;
         }
         else if ((active2 & 0x100000000L) != 0L)
         {
            jjmatchedKind = 160;
            jjmatchedPos = 3;
         }
         else if ((active2 & 0x1000000000000000L) != 0L)
         {
            jjmatchedKind = 188;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x33000000L, active1, 0x1800000a000b0080L, active2, 0x2040444000006b24L);
      case 103:
         if ((active1 & 0x10L) != 0L)
         {
            jjmatchedKind = 68;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x4000400001000000L, active2, 0x3000000000000L);
      case 104:
         if ((active0 & 0x20000000000000L) != 0L)
         {
            jjmatchedKind = 53;
            jjmatchedPos = 3;
         }
         else if ((active0 & 0x80000000000000L) != 0L)
         {
            jjmatchedKind = 55;
            jjmatchedPos = 3;
         }
         else if ((active1 & 0x2L) != 0L)
         {
            jjmatchedKind = 65;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x3000L, active2, 0L);
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0x400000000L, active1, 0x200004090008000L, active2, 0x80009400000000L);
      case 107:
         if ((active1 & 0x1L) != 0L)
         {
            jjmatchedKind = 64;
            jjmatchedPos = 3;
         }
         break;
      case 108:
         if ((active0 & 0x100000L) != 0L)
         {
            jjmatchedKind = 20;
            jjmatchedPos = 3;
         }
         else if ((active0 & 0x40000000000000L) != 0L)
         {
            jjmatchedKind = 54;
            jjmatchedPos = 3;
         }
         else if ((active2 & 0x4000000L) != 0L)
         {
            jjmatchedKind = 154;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x300000000L, active1, 0x4000100004800L, active2, 0x110000810000L);
      case 109:
         if ((active0 & 0x200000000000000L) != 0L)
         {
            jjmatchedKind = 57;
            jjmatchedPos = 3;
         }
         else if ((active0 & 0x4000000000000000L) != 0L)
         {
            jjmatchedKind = 62;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x40000000L, active1, 0L, active2, 0x20400L);
      case 110:
         if ((active0 & 0x2000000000000000L) != 0L)
         {
            jjmatchedKind = 61;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0xa00200L, active2, 0x4000000100000L);
      case 111:
         if ((active0 & 0x1000000000000000L) != 0L)
         {
            jjmatchedKind = 60;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x4044c400000L, active2, 0x8000000440000L);
      case 112:
         if ((active0 & 0x400000L) != 0L)
         {
            jjmatchedKind = 22;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x80000000L, active1, 0L, active2, 0x10L);
      case 113:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x8000000000L, active2, 0L);
      case 114:
         if ((active1 & 0x4L) != 0L)
         {
            jjmatchedKind = 66;
            jjmatchedPos = 3;
         }
         else if ((active2 & 0x20000000L) != 0L)
         {
            jjmatchedKind = 157;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x8000000000000500L, active2, 0xe00000000000002L);
      case 115:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x100001000040000L, active2, 0x80L);
      case 116:
         if ((active0 & 0x400000000000000L) != 0L)
         {
            jjmatchedKind = 58;
            jjmatchedPos = 3;
         }
         else if ((active1 & 0x8L) != 0L)
         {
            jjmatchedKind = 67;
            jjmatchedPos = 3;
         }
         else if ((active2 & 0x40000000L) != 0L)
         {
            jjmatchedKind = 158;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x1000000000L, active1, 0x2080000000000000L, active2, 0x80008L);
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x440132022000000L, active2, 0x8000L);
      case 118:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x18000000000000L, active2, 0x40L);
      case 119:
         if ((active0 & 0x800000L) != 0L)
         {
            jjmatchedKind = 23;
            jjmatchedPos = 3;
         }
         else if ((active0 & 0x8000000000000000L) != 0L)
         {
            jjmatchedKind = 63;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x200000000000L, active2, 0L);
      case 121:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x1000000000000L, active2, 0x20000000000L);
      default :
         break;
   }
   return jjMoveNfa_0(5, 3);
}
private final int jjMoveStringLiteralDfa4_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjMoveNfa_0(5, 3);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(5, 3);
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0x38000000000000L);
      case 65:
         return jjMoveStringLiteralDfa5_0(active0, 0x180000000L, active1, 0x18000000000000L, active2, 0x1c0000000030402L);
      case 66:
         return jjMoveStringLiteralDfa5_0(active0, 0x200000000L, active1, 0x4000000000000L, active2, 0L);
      case 67:
         return jjMoveStringLiteralDfa5_0(active0, 0x2000000L, active1, 0x8000000L, active2, 0L);
      case 68:
         return jjMoveStringLiteralDfa5_0(active0, 0x1000000000L, active1, 0L, active2, 0x4L);
      case 69:
         if ((active1 & 0x400L) != 0L)
         {
            jjmatchedKind = 74;
            jjmatchedPos = 4;
         }
         else if ((active1 & 0x800L) != 0L)
         {
            jjmatchedKind = 75;
            jjmatchedPos = 4;
         }
         else if ((active1 & 0x1000L) != 0L)
         {
            jjmatchedKind = 76;
            jjmatchedPos = 4;
         }
         else if ((active1 & 0x4000L) != 0L)
         {
            jjmatchedKind = 78;
            jjmatchedPos = 4;
         }
         else if ((active1 & 0x1000000L) != 0L)
         {
            jjmatchedKind = 88;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x8040202000000000L, active2, 0xe00010000200001L);
      case 71:
         if ((active1 & 0x200000L) != 0L)
         {
            jjmatchedKind = 85;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x400000000000L, active2, 0x40000000000L);
      case 72:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0x80000000000L);
      case 73:
         return jjMoveStringLiteralDfa5_0(active0, 0x40000000L, active1, 0x2001080100000000L, active2, 0x220000080848L);
      case 75:
         if ((active1 & 0x100000L) != 0L)
         {
            jjmatchedKind = 84;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x40000000L, active2, 0L);
      case 76:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x200000000000000L, active2, 0x100800000000L);
      case 77:
         return jjMoveStringLiteralDfa5_0(active0, 0x400000000L, active1, 0x10800000000L, active2, 0x8000000000L);
      case 78:
         if ((active1 & 0x400000L) != 0L)
         {
            jjmatchedKind = 86;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x4000000000L, active2, 0x1400440000L);
      case 79:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x90000000L, active2, 0x10L);
      case 80:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x400000220000000L, active2, 0x8000L);
      case 82:
         if ((active0 & 0x1000000L) != 0L)
         {
            jjmatchedKind = 24;
            jjmatchedPos = 4;
         }
         else if ((active1 & 0x80L) != 0L)
         {
            jjmatchedKind = 71;
            jjmatchedPos = 4;
         }
         else if ((active1 & 0x10000L) != 0L)
         {
            jjmatchedKind = 80;
            jjmatchedPos = 4;
         }
         else if ((active1 & 0x80000L) != 0L)
         {
            jjmatchedKind = 83;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0x820000000L, active1, 0x1880120406000000L, active2, 0x6000000320L);
      case 83:
         if ((active1 & 0x40000L) != 0L)
         {
            jjmatchedKind = 82;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0x4400000000000L);
      case 84:
         if ((active1 & 0x100L) != 0L)
         {
            jjmatchedKind = 72;
            jjmatchedPos = 4;
         }
         else if ((active1 & 0x200L) != 0L)
         {
            jjmatchedKind = 73;
            jjmatchedPos = 4;
         }
         else if ((active1 & 0x2000L) != 0L)
         {
            jjmatchedKind = 77;
            jjmatchedPos = 4;
         }
         else if ((active1 & 0x8000L) != 0L)
         {
            jjmatchedKind = 79;
            jjmatchedPos = 4;
         }
         else if ((active1 & 0x800000L) != 0L)
         {
            jjmatchedKind = 87;
            jjmatchedPos = 4;
         }
         else if ((active2 & 0x200000000L) != 0L)
         {
            jjmatchedKind = 161;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0x1c000000L, active1, 0x20001000000000L, active2, 0x100080L);
      case 85:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x4002848000000000L, active2, 0L);
      case 86:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0x3000000000000L);
      case 87:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x100000000000000L, active2, 0L);
      case 88:
         if ((active1 & 0x20000L) != 0L)
         {
            jjmatchedKind = 81;
            jjmatchedPos = 4;
         }
         else if ((active2 & 0x2000000000000000L) != 0L)
         {
            jjmatchedKind = 189;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0x6000L);
      case 95:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0x800000800000L);
      case 97:
         return jjMoveStringLiteralDfa5_0(active0, 0x180000000L, active1, 0x18000000000000L, active2, 0x1c0000000030402L);
      case 98:
         return jjMoveStringLiteralDfa5_0(active0, 0x200000000L, active1, 0x4000000000000L, active2, 0L);
      case 99:
         return jjMoveStringLiteralDfa5_0(active0, 0x2000000L, active1, 0x8000000L, active2, 0L);
      case 100:
         return jjMoveStringLiteralDfa5_0(active0, 0x1000000000L, active1, 0L, active2, 0x4L);
      case 101:
         if ((active1 & 0x400L) != 0L)
         {
            jjmatchedKind = 74;
            jjmatchedPos = 4;
         }
         else if ((active1 & 0x800L) != 0L)
         {
            jjmatchedKind = 75;
            jjmatchedPos = 4;
         }
         else if ((active1 & 0x1000L) != 0L)
         {
            jjmatchedKind = 76;
            jjmatchedPos = 4;
         }
         else if ((active1 & 0x4000L) != 0L)
         {
            jjmatchedKind = 78;
            jjmatchedPos = 4;
         }
         else if ((active1 & 0x1000000L) != 0L)
         {
            jjmatchedKind = 88;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x8040202000000000L, active2, 0xe00010000200001L);
      case 103:
         if ((active1 & 0x200000L) != 0L)
         {
            jjmatchedKind = 85;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x400000000000L, active2, 0x40000000000L);
      case 104:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0x80000000000L);
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0x40000000L, active1, 0x2001080100000000L, active2, 0x220000080848L);
      case 107:
         if ((active1 & 0x100000L) != 0L)
         {
            jjmatchedKind = 84;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x40000000L, active2, 0L);
      case 108:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x200000000000000L, active2, 0x100800000000L);
      case 109:
         return jjMoveStringLiteralDfa5_0(active0, 0x400000000L, active1, 0x10800000000L, active2, 0x8000000000L);
      case 110:
         if ((active1 & 0x400000L) != 0L)
         {
            jjmatchedKind = 86;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x4000000000L, active2, 0x1400440000L);
      case 111:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x90000000L, active2, 0x10L);
      case 112:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x400000220000000L, active2, 0x8000L);
      case 114:
         if ((active0 & 0x1000000L) != 0L)
         {
            jjmatchedKind = 24;
            jjmatchedPos = 4;
         }
         else if ((active1 & 0x80L) != 0L)
         {
            jjmatchedKind = 71;
            jjmatchedPos = 4;
         }
         else if ((active1 & 0x10000L) != 0L)
         {
            jjmatchedKind = 80;
            jjmatchedPos = 4;
         }
         else if ((active1 & 0x80000L) != 0L)
         {
            jjmatchedKind = 83;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0x820000000L, active1, 0x1880120406000000L, active2, 0x6000000320L);
      case 115:
         if ((active1 & 0x40000L) != 0L)
         {
            jjmatchedKind = 82;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0x4400000000000L);
      case 116:
         if ((active1 & 0x100L) != 0L)
         {
            jjmatchedKind = 72;
            jjmatchedPos = 4;
         }
         else if ((active1 & 0x200L) != 0L)
         {
            jjmatchedKind = 73;
            jjmatchedPos = 4;
         }
         else if ((active1 & 0x2000L) != 0L)
         {
            jjmatchedKind = 77;
            jjmatchedPos = 4;
         }
         else if ((active1 & 0x8000L) != 0L)
         {
            jjmatchedKind = 79;
            jjmatchedPos = 4;
         }
         else if ((active1 & 0x800000L) != 0L)
         {
            jjmatchedKind = 87;
            jjmatchedPos = 4;
         }
         else if ((active2 & 0x200000000L) != 0L)
         {
            jjmatchedKind = 161;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0x1c000000L, active1, 0x20001000000000L, active2, 0x100080L);
      case 117:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x4002848000000000L, active2, 0L);
      case 118:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0x3000000000000L);
      case 119:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x100000000000000L, active2, 0L);
      case 120:
         if ((active1 & 0x20000L) != 0L)
         {
            jjmatchedKind = 81;
            jjmatchedPos = 4;
         }
         else if ((active2 & 0x2000000000000000L) != 0L)
         {
            jjmatchedKind = 189;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0x6000L);
      default :
         break;
   }
   return jjMoveNfa_0(5, 4);
}
private final int jjMoveStringLiteralDfa5_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjMoveNfa_0(5, 4);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(5, 4);
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0xc00000000000000L, active2, 0x8000L);
      case 65:
         if ((active1 & 0x800000000L) != 0L)
         {
            jjmatchedKind = 99;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0x200000000L, active1, 0x4004100000000000L, active2, 0x7098000080008L);
      case 67:
         if ((active1 & 0x100000000L) != 0L)
         {
            jjmatchedKind = 96;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0x80000000L, active1, 0L, active2, 0x18000000200002L);
      case 68:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0L, active2, 0x100000000840001L);
      case 69:
         if ((active0 & 0x4000000L) != 0L)
         {
            jjmatchedKind = 26;
            jjmatchedPos = 5;
         }
         else if ((active0 & 0x8000000L) != 0L)
         {
            jjmatchedKind = 27;
            jjmatchedPos = 5;
         }
         else if ((active0 & 0x10000000L) != 0L)
         {
            jjmatchedKind = 28;
            jjmatchedPos = 5;
         }
         else if ((active1 & 0x4000000L) != 0L)
         {
            jjmatchedKind = 90;
            jjmatchedPos = 5;
         }
         else if ((active1 & 0x40000000L) != 0L)
         {
            jjmatchedKind = 94;
            jjmatchedPos = 5;
         }
         else if ((active1 & 0x400000000L) != 0L)
         {
            jjmatchedKind = 98;
            jjmatchedPos = 5;
         }
         else if ((active1 & 0x8000000000L) != 0L)
         {
            jjmatchedKind = 103;
            jjmatchedPos = 5;
         }
         else if ((active2 & 0x800000000L) != 0L)
         {
            jjmatchedKind = 163;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x600000000000L, active2, 0x40000000200L);
      case 71:
         if ((active1 & 0x4000000000L) != 0L)
         {
            jjmatchedKind = 102;
            jjmatchedPos = 5;
         }
         else if ((active2 & 0x1000000000L) != 0L)
         {
            jjmatchedKind = 164;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0L, active2, 0x800L);
      case 73:
         return jjMoveStringLiteralDfa6_0(active0, 0xd00000000L, active1, 0x2a0000000000000L, active2, 0x104000500004L);
      case 75:
         if ((active1 & 0x8000000L) != 0L)
         {
            jjmatchedKind = 91;
            jjmatchedPos = 5;
         }
         break;
      case 76:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x18800000000000L, active2, 0x80000000000040L);
      case 77:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x8000000000000000L, active2, 0L);
      case 78:
         if ((active1 & 0x2000000L) != 0L)
         {
            jjmatchedKind = 89;
            jjmatchedPos = 5;
         }
         else if ((active1 & 0x10000000L) != 0L)
         {
            jjmatchedKind = 92;
            jjmatchedPos = 5;
         }
         else if ((active1 & 0x80000000L) != 0L)
         {
            jjmatchedKind = 95;
            jjmatchedPos = 5;
         }
         else if ((active1 & 0x10000000000L) != 0L)
         {
            jjmatchedKind = 104;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x20410e0000000000L, active2, 0xe00220000000000L);
      case 79:
         return jjMoveStringLiteralDfa6_0(active0, 0x1000000000L, active1, 0x100000000000000L, active2, 0x800000000000L);
      case 82:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x1000000000000000L, active2, 0x20590L);
      case 83:
         if ((active1 & 0x20000000L) != 0L)
         {
            jjmatchedKind = 93;
            jjmatchedPos = 5;
         }
         else if ((active1 & 0x1000000000L) != 0L)
         {
            jjmatchedKind = 100;
            jjmatchedPos = 5;
         }
         else if ((active1 & 0x2000000000L) != 0L)
         {
            jjmatchedKind = 101;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0L, active2, 0x20L);
      case 84:
         if ((active0 & 0x2000000L) != 0L)
         {
            jjmatchedKind = 25;
            jjmatchedPos = 5;
         }
         else if ((active0 & 0x20000000L) != 0L)
         {
            jjmatchedKind = 29;
            jjmatchedPos = 5;
         }
         else if ((active0 & 0x40000000L) != 0L)
         {
            jjmatchedKind = 30;
            jjmatchedPos = 5;
         }
         else if ((active1 & 0x200000000L) != 0L)
         {
            jjmatchedKind = 97;
            jjmatchedPos = 5;
         }
         else if ((active2 & 0x400000000L) != 0L)
         {
            jjmatchedKind = 162;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x2000000000000L, active2, 0x40400000010000L);
      case 85:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0L, active2, 0x20000000000000L);
      case 89:
         if ((active2 & 0x2000000000L) != 0L)
         {
            jjmatchedKind = 165;
            jjmatchedPos = 5;
         }
         break;
      case 95:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0L, active2, 0x6000L);
      case 97:
         if ((active1 & 0x800000000L) != 0L)
         {
            jjmatchedKind = 99;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0x200000000L, active1, 0x4004100000000000L, active2, 0x7098000080008L);
      case 99:
         if ((active1 & 0x100000000L) != 0L)
         {
            jjmatchedKind = 96;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0x80000000L, active1, 0L, active2, 0x18000000200002L);
      case 100:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0L, active2, 0x100000000840001L);
      case 101:
         if ((active0 & 0x4000000L) != 0L)
         {
            jjmatchedKind = 26;
            jjmatchedPos = 5;
         }
         else if ((active0 & 0x8000000L) != 0L)
         {
            jjmatchedKind = 27;
            jjmatchedPos = 5;
         }
         else if ((active0 & 0x10000000L) != 0L)
         {
            jjmatchedKind = 28;
            jjmatchedPos = 5;
         }
         else if ((active1 & 0x4000000L) != 0L)
         {
            jjmatchedKind = 90;
            jjmatchedPos = 5;
         }
         else if ((active1 & 0x40000000L) != 0L)
         {
            jjmatchedKind = 94;
            jjmatchedPos = 5;
         }
         else if ((active1 & 0x400000000L) != 0L)
         {
            jjmatchedKind = 98;
            jjmatchedPos = 5;
         }
         else if ((active1 & 0x8000000000L) != 0L)
         {
            jjmatchedKind = 103;
            jjmatchedPos = 5;
         }
         else if ((active2 & 0x800000000L) != 0L)
         {
            jjmatchedKind = 163;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x600000000000L, active2, 0x40000000200L);
      case 103:
         if ((active1 & 0x4000000000L) != 0L)
         {
            jjmatchedKind = 102;
            jjmatchedPos = 5;
         }
         else if ((active2 & 0x1000000000L) != 0L)
         {
            jjmatchedKind = 164;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0L, active2, 0x800L);
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0xd00000000L, active1, 0x2a0000000000000L, active2, 0x104000500004L);
      case 107:
         if ((active1 & 0x8000000L) != 0L)
         {
            jjmatchedKind = 91;
            jjmatchedPos = 5;
         }
         break;
      case 108:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x18800000000000L, active2, 0x80000000000040L);
      case 109:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x8000000000000000L, active2, 0L);
      case 110:
         if ((active1 & 0x2000000L) != 0L)
         {
            jjmatchedKind = 89;
            jjmatchedPos = 5;
         }
         else if ((active1 & 0x10000000L) != 0L)
         {
            jjmatchedKind = 92;
            jjmatchedPos = 5;
         }
         else if ((active1 & 0x80000000L) != 0L)
         {
            jjmatchedKind = 95;
            jjmatchedPos = 5;
         }
         else if ((active1 & 0x10000000000L) != 0L)
         {
            jjmatchedKind = 104;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x20410e0000000000L, active2, 0xe00220000000000L);
      case 111:
         return jjMoveStringLiteralDfa6_0(active0, 0x1000000000L, active1, 0x100000000000000L, active2, 0x800000000000L);
      case 114:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x1000000000000000L, active2, 0x20590L);
      case 115:
         if ((active1 & 0x20000000L) != 0L)
         {
            jjmatchedKind = 93;
            jjmatchedPos = 5;
         }
         else if ((active1 & 0x1000000000L) != 0L)
         {
            jjmatchedKind = 100;
            jjmatchedPos = 5;
         }
         else if ((active1 & 0x2000000000L) != 0L)
         {
            jjmatchedKind = 101;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0L, active2, 0x20L);
      case 116:
         if ((active0 & 0x2000000L) != 0L)
         {
            jjmatchedKind = 25;
            jjmatchedPos = 5;
         }
         else if ((active0 & 0x20000000L) != 0L)
         {
            jjmatchedKind = 29;
            jjmatchedPos = 5;
         }
         else if ((active0 & 0x40000000L) != 0L)
         {
            jjmatchedKind = 30;
            jjmatchedPos = 5;
         }
         else if ((active1 & 0x200000000L) != 0L)
         {
            jjmatchedKind = 97;
            jjmatchedPos = 5;
         }
         else if ((active2 & 0x400000000L) != 0L)
         {
            jjmatchedKind = 162;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x2000000000000L, active2, 0x40400000010000L);
      case 117:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0L, active2, 0x20000000000000L);
      case 121:
         if ((active2 & 0x2000000000L) != 0L)
         {
            jjmatchedKind = 165;
            jjmatchedPos = 5;
         }
         break;
      default :
         break;
   }
   return jjMoveNfa_0(5, 5);
}
private final int jjMoveStringLiteralDfa6_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjMoveNfa_0(5, 5);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(5, 5);
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0x40600000040194L);
      case 66:
         return jjMoveStringLiteralDfa7_0(active0, 0x800000000L, active1, 0xc00000000000000L, active2, 0x800000004000L);
      case 67:
         if ((active2 & 0x4000000000L) != 0L)
         {
            jjmatchedKind = 166;
            jjmatchedPos = 6;
         }
         return jjMoveStringLiteralDfa7_0(active0, 0x200000000L, active1, 0x20c4000000000000L, active2, 0x4000000500000L);
      case 69:
         if ((active1 & 0x2000000000000L) != 0L)
         {
            jjmatchedKind = 113;
            jjmatchedPos = 6;
         }
         else if ((active2 & 0x10000L) != 0L)
         {
            jjmatchedKind = 144;
            jjmatchedPos = 6;
         }
         else if ((active2 & 0x100000000000000L) != 0L)
         {
            jjmatchedKind = 184;
            jjmatchedPos = 6;
         }
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x9000000000000000L, active2, 0x800060L);
      case 71:
         if ((active1 & 0x80000000000L) != 0L)
         {
            jjmatchedKind = 107;
            jjmatchedPos = 6;
         }
         else if ((active1 & 0x1000000000000L) != 0L)
         {
            jjmatchedKind = 112;
            jjmatchedPos = 6;
         }
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x4000000000000000L, active2, 0L);
      case 73:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0x80000000000000L);
      case 76:
         if ((active1 & 0x100000000000L) != 0L)
         {
            jjmatchedKind = 108;
            jjmatchedPos = 6;
         }
         else if ((active2 & 0x8000000000L) != 0L)
         {
            jjmatchedKind = 167;
            jjmatchedPos = 6;
         }
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0x8L);
      case 77:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0x8000L);
      case 78:
         if ((active0 & 0x100000000L) != 0L)
         {
            jjmatchedKind = 32;
            jjmatchedPos = 6;
         }
         else if ((active1 & 0x200000000000L) != 0L)
         {
            jjmatchedKind = 109;
            jjmatchedPos = 6;
         }
         else if ((active2 & 0x800L) != 0L)
         {
            jjmatchedKind = 139;
            jjmatchedPos = 6;
         }
         else if ((active2 & 0x10000000000L) != 0L)
         {
            jjmatchedKind = 168;
            jjmatchedPos = 6;
         }
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x200000000000000L, active2, 0x20100000002200L);
      case 79:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x20000000000000L, active2, 0x18000000200000L);
      case 82:
         if ((active1 & 0x400000000000L) != 0L)
         {
            jjmatchedKind = 110;
            jjmatchedPos = 6;
         }
         else if ((active2 & 0x40000000000L) != 0L)
         {
            jjmatchedKind = 170;
            jjmatchedPos = 6;
         }
         else if ((active2 & 0x80000000000L) != 0L)
         {
            jjmatchedKind = 171;
            jjmatchedPos = 6;
         }
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x100000000000000L, active2, 0x3000000080000L);
      case 83:
         if ((active1 & 0x20000000000L) != 0L)
         {
            jjmatchedKind = 105;
            jjmatchedPos = 6;
         }
         break;
      case 84:
         if ((active0 & 0x80000000L) != 0L)
         {
            jjmatchedKind = 31;
            jjmatchedPos = 6;
         }
         else if ((active1 & 0x40000000000L) != 0L)
         {
            jjmatchedKind = 106;
            jjmatchedPos = 6;
         }
         else if ((active1 & 0x800000000000L) != 0L)
         {
            jjmatchedKind = 111;
            jjmatchedPos = 6;
         }
         else if ((active2 & 0x20000000000L) != 0L)
         {
            jjmatchedKind = 169;
            jjmatchedPos = 6;
         }
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0xe00000000000002L);
      case 85:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x18000000000000L, active2, 0x1L);
      case 87:
         return jjMoveStringLiteralDfa7_0(active0, 0x1000000000L, active1, 0L, active2, 0L);
      case 89:
         if ((active2 & 0x400L) != 0L)
         {
            jjmatchedKind = 138;
            jjmatchedPos = 6;
         }
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0x20000L);
      case 90:
         return jjMoveStringLiteralDfa7_0(active0, 0x400000000L, active1, 0L, active2, 0L);
      case 97:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0x40600000040194L);
      case 98:
         return jjMoveStringLiteralDfa7_0(active0, 0x800000000L, active1, 0xc00000000000000L, active2, 0x800000004000L);
      case 99:
         if ((active2 & 0x4000000000L) != 0L)
         {
            jjmatchedKind = 166;
            jjmatchedPos = 6;
         }
         return jjMoveStringLiteralDfa7_0(active0, 0x200000000L, active1, 0x20c4000000000000L, active2, 0x4000000500000L);
      case 101:
         if ((active1 & 0x2000000000000L) != 0L)
         {
            jjmatchedKind = 113;
            jjmatchedPos = 6;
         }
         else if ((active2 & 0x10000L) != 0L)
         {
            jjmatchedKind = 144;
            jjmatchedPos = 6;
         }
         else if ((active2 & 0x100000000000000L) != 0L)
         {
            jjmatchedKind = 184;
            jjmatchedPos = 6;
         }
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x9000000000000000L, active2, 0x800060L);
      case 103:
         if ((active1 & 0x80000000000L) != 0L)
         {
            jjmatchedKind = 107;
            jjmatchedPos = 6;
         }
         else if ((active1 & 0x1000000000000L) != 0L)
         {
            jjmatchedKind = 112;
            jjmatchedPos = 6;
         }
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x4000000000000000L, active2, 0L);
      case 105:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0x80000000000000L);
      case 108:
         if ((active1 & 0x100000000000L) != 0L)
         {
            jjmatchedKind = 108;
            jjmatchedPos = 6;
         }
         else if ((active2 & 0x8000000000L) != 0L)
         {
            jjmatchedKind = 167;
            jjmatchedPos = 6;
         }
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0x8L);
      case 109:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0x8000L);
      case 110:
         if ((active0 & 0x100000000L) != 0L)
         {
            jjmatchedKind = 32;
            jjmatchedPos = 6;
         }
         else if ((active1 & 0x200000000000L) != 0L)
         {
            jjmatchedKind = 109;
            jjmatchedPos = 6;
         }
         else if ((active2 & 0x800L) != 0L)
         {
            jjmatchedKind = 139;
            jjmatchedPos = 6;
         }
         else if ((active2 & 0x10000000000L) != 0L)
         {
            jjmatchedKind = 168;
            jjmatchedPos = 6;
         }
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x200000000000000L, active2, 0x20100000002200L);
      case 111:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x20000000000000L, active2, 0x18000000200000L);
      case 114:
         if ((active1 & 0x400000000000L) != 0L)
         {
            jjmatchedKind = 110;
            jjmatchedPos = 6;
         }
         else if ((active2 & 0x40000000000L) != 0L)
         {
            jjmatchedKind = 170;
            jjmatchedPos = 6;
         }
         else if ((active2 & 0x80000000000L) != 0L)
         {
            jjmatchedKind = 171;
            jjmatchedPos = 6;
         }
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x100000000000000L, active2, 0x3000000080000L);
      case 115:
         if ((active1 & 0x20000000000L) != 0L)
         {
            jjmatchedKind = 105;
            jjmatchedPos = 6;
         }
         break;
      case 116:
         if ((active0 & 0x80000000L) != 0L)
         {
            jjmatchedKind = 31;
            jjmatchedPos = 6;
         }
         else if ((active1 & 0x40000000000L) != 0L)
         {
            jjmatchedKind = 106;
            jjmatchedPos = 6;
         }
         else if ((active1 & 0x800000000000L) != 0L)
         {
            jjmatchedKind = 111;
            jjmatchedPos = 6;
         }
         else if ((active2 & 0x20000000000L) != 0L)
         {
            jjmatchedKind = 169;
            jjmatchedPos = 6;
         }
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0xe00000000000002L);
      case 117:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x18000000000000L, active2, 0x1L);
      case 119:
         return jjMoveStringLiteralDfa7_0(active0, 0x1000000000L, active1, 0L, active2, 0L);
      case 121:
         if ((active2 & 0x400L) != 0L)
         {
            jjmatchedKind = 138;
            jjmatchedPos = 6;
         }
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0x20000L);
      case 122:
         return jjMoveStringLiteralDfa7_0(active0, 0x400000000L, active1, 0L, active2, 0L);
      default :
         break;
   }
   return jjMoveNfa_0(5, 6);
}
private final int jjMoveStringLiteralDfa7_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjMoveNfa_0(5, 6);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(5, 6);
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 0x508000L);
      case 66:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 0x42000000000100L);
      case 67:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 0x21000000800220L);
      case 68:
         if ((active1 & 0x100000000000000L) != 0L)
         {
            jjmatchedKind = 120;
            jjmatchedPos = 7;
         }
         else if ((active1 & 0x1000000000000000L) != 0L)
         {
            jjmatchedKind = 124;
            jjmatchedPos = 7;
         }
         break;
      case 69:
         if ((active0 & 0x400000000L) != 0L)
         {
            jjmatchedKind = 34;
            jjmatchedPos = 7;
         }
         else if ((active0 & 0x800000000L) != 0L)
         {
            jjmatchedKind = 35;
            jjmatchedPos = 7;
         }
         else if ((active1 & 0x8000000000000L) != 0L)
         {
            jjmatchedKind = 115;
            jjmatchedPos = 7;
         }
         else if ((active1 & 0x10000000000000L) != 0L)
         {
            jjmatchedKind = 116;
            jjmatchedPos = 7;
         }
         else if ((active1 & 0x40000000000000L) != 0L)
         {
            jjmatchedKind = 118;
            jjmatchedPos = 7;
         }
         else if ((active1 & 0x4000000000000000L) != 0L)
         {
            jjmatchedKind = 126;
            jjmatchedPos = 7;
         }
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 0x2L);
      case 71:
         if ((active1 & 0x200000000000000L) != 0L)
         {
            jjmatchedKind = 121;
            jjmatchedPos = 7;
         }
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 0x40L);
      case 73:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 0x80L);
      case 74:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 0x800000000000L);
      case 75:
         if ((active0 & 0x200000000L) != 0L)
         {
            jjmatchedKind = 33;
            jjmatchedPos = 7;
         }
         else if ((active1 & 0x4000000000000L) != 0L)
         {
            jjmatchedKind = 114;
            jjmatchedPos = 7;
         }
         break;
      case 76:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 0x4008L);
      case 77:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 0x18400000200000L);
      case 78:
         if ((active0 & 0x1000000000L) != 0L)
         {
            jjmatchedKind = 36;
            jjmatchedPos = 7;
         }
         else if ((active1 & 0x20000000000000L) != 0L)
         {
            jjmatchedKind = 117;
            jjmatchedPos = 7;
         }
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x8000000000000000L, active2, 0L);
      case 79:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 0x2000L);
      case 82:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 0x200000040011L);
      case 84:
         if ((active1 & 0x80000000000000L) != 0L)
         {
            jjmatchedKind = 119;
            jjmatchedPos = 7;
         }
         else if ((active1 & 0x2000000000000000L) != 0L)
         {
            jjmatchedKind = 125;
            jjmatchedPos = 7;
         }
         else if ((active2 & 0x100000000000L) != 0L)
         {
            jjmatchedKind = 172;
            jjmatchedPos = 7;
         }
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 0x4000000000004L);
      case 89:
         if ((active1 & 0x400000000000000L) != 0L)
         {
            jjmatchedKind = 122;
            jjmatchedPos = 7;
         }
         else if ((active1 & 0x800000000000000L) != 0L)
         {
            jjmatchedKind = 123;
            jjmatchedPos = 7;
         }
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 0x80000L);
      case 90:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 0x80000000000000L);
      case 95:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 0xe00000000020000L);
      case 97:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 0x508000L);
      case 98:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 0x42000000000100L);
      case 99:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 0x21000000800220L);
      case 100:
         if ((active1 & 0x100000000000000L) != 0L)
         {
            jjmatchedKind = 120;
            jjmatchedPos = 7;
         }
         else if ((active1 & 0x1000000000000000L) != 0L)
         {
            jjmatchedKind = 124;
            jjmatchedPos = 7;
         }
         break;
      case 101:
         if ((active0 & 0x400000000L) != 0L)
         {
            jjmatchedKind = 34;
            jjmatchedPos = 7;
         }
         else if ((active0 & 0x800000000L) != 0L)
         {
            jjmatchedKind = 35;
            jjmatchedPos = 7;
         }
         else if ((active1 & 0x8000000000000L) != 0L)
         {
            jjmatchedKind = 115;
            jjmatchedPos = 7;
         }
         else if ((active1 & 0x10000000000000L) != 0L)
         {
            jjmatchedKind = 116;
            jjmatchedPos = 7;
         }
         else if ((active1 & 0x40000000000000L) != 0L)
         {
            jjmatchedKind = 118;
            jjmatchedPos = 7;
         }
         else if ((active1 & 0x4000000000000000L) != 0L)
         {
            jjmatchedKind = 126;
            jjmatchedPos = 7;
         }
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 0x2L);
      case 103:
         if ((active1 & 0x200000000000000L) != 0L)
         {
            jjmatchedKind = 121;
            jjmatchedPos = 7;
         }
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 0x40L);
      case 105:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 0x80L);
      case 106:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 0x800000000000L);
      case 107:
         if ((active0 & 0x200000000L) != 0L)
         {
            jjmatchedKind = 33;
            jjmatchedPos = 7;
         }
         else if ((active1 & 0x4000000000000L) != 0L)
         {
            jjmatchedKind = 114;
            jjmatchedPos = 7;
         }
         break;
      case 108:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 0x4008L);
      case 109:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 0x18400000200000L);
      case 110:
         if ((active0 & 0x1000000000L) != 0L)
         {
            jjmatchedKind = 36;
            jjmatchedPos = 7;
         }
         else if ((active1 & 0x20000000000000L) != 0L)
         {
            jjmatchedKind = 117;
            jjmatchedPos = 7;
         }
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x8000000000000000L, active2, 0L);
      case 111:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 0x2000L);
      case 114:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 0x200000040011L);
      case 116:
         if ((active1 & 0x80000000000000L) != 0L)
         {
            jjmatchedKind = 119;
            jjmatchedPos = 7;
         }
         else if ((active1 & 0x2000000000000000L) != 0L)
         {
            jjmatchedKind = 125;
            jjmatchedPos = 7;
         }
         else if ((active2 & 0x100000000000L) != 0L)
         {
            jjmatchedKind = 172;
            jjmatchedPos = 7;
         }
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 0x4000000000004L);
      case 121:
         if ((active1 & 0x400000000000000L) != 0L)
         {
            jjmatchedKind = 122;
            jjmatchedPos = 7;
         }
         else if ((active1 & 0x800000000000000L) != 0L)
         {
            jjmatchedKind = 123;
            jjmatchedPos = 7;
         }
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 0x80000L);
      case 122:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 0x80000000000000L);
      default :
         break;
   }
   return jjMoveNfa_0(5, 7);
}
private final int jjMoveStringLiteralDfa8_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjMoveNfa_0(5, 7);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(5, 7);
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa9_0(active1, 0L, active2, 0x80000000000000L);
      case 68:
         return jjMoveStringLiteralDfa9_0(active1, 0L, active2, 0x400000000000000L);
      case 69:
         if ((active2 & 0x1L) != 0L)
         {
            jjmatchedKind = 128;
            jjmatchedPos = 8;
         }
         else if ((active2 & 0x4L) != 0L)
         {
            jjmatchedKind = 130;
            jjmatchedPos = 8;
         }
         return jjMoveStringLiteralDfa9_0(active1, 0L, active2, 0x800000000240L);
      case 72:
         return jjMoveStringLiteralDfa9_0(active1, 0L, active2, 0x1000000000000L);
      case 73:
         return jjMoveStringLiteralDfa9_0(active1, 0L, active2, 0x6000000004000L);
      case 76:
         return jjMoveStringLiteralDfa9_0(active1, 0L, active2, 0x40000000500100L);
      case 77:
         return jjMoveStringLiteralDfa9_0(active1, 0L, active2, 0x18000000000000L);
      case 78:
         return jjMoveStringLiteralDfa9_0(active1, 0L, active2, 0x2080L);
      case 79:
         return jjMoveStringLiteralDfa9_0(active1, 0L, active2, 0x20000000800000L);
      case 80:
         if ((active2 & 0x400000000000L) != 0L)
         {
            jjmatchedKind = 174;
            jjmatchedPos = 8;
         }
         return jjMoveStringLiteralDfa9_0(active1, 0L, active2, 0x200000L);
      case 82:
         if ((active2 & 0x2L) != 0L)
         {
            jjmatchedKind = 129;
            jjmatchedPos = 8;
         }
         break;
      case 83:
         return jjMoveStringLiteralDfa9_0(active1, 0L, active2, 0x20000L);
      case 84:
         if ((active1 & 0x8000000000000000L) != 0L)
         {
            jjmatchedKind = 127;
            jjmatchedPos = 8;
         }
         else if ((active2 & 0x20L) != 0L)
         {
            jjmatchedKind = 133;
            jjmatchedPos = 8;
         }
         return jjMoveStringLiteralDfa9_0(active1, 0L, active2, 0xa00000000000000L);
      case 88:
         if ((active2 & 0x8000L) != 0L)
         {
            jjmatchedKind = 143;
            jjmatchedPos = 8;
         }
         break;
      case 89:
         if ((active2 & 0x8L) != 0L)
         {
            jjmatchedKind = 131;
            jjmatchedPos = 8;
         }
         else if ((active2 & 0x10L) != 0L)
         {
            jjmatchedKind = 132;
            jjmatchedPos = 8;
         }
         else if ((active2 & 0x200000000000L) != 0L)
         {
            jjmatchedKind = 173;
            jjmatchedPos = 8;
         }
         return jjMoveStringLiteralDfa9_0(active1, 0L, active2, 0x40000L);
      case 95:
         return jjMoveStringLiteralDfa9_0(active1, 0L, active2, 0x80000L);
      case 97:
         return jjMoveStringLiteralDfa9_0(active1, 0L, active2, 0x80000000000000L);
      case 100:
         return jjMoveStringLiteralDfa9_0(active1, 0L, active2, 0x400000000000000L);
      case 101:
         if ((active2 & 0x1L) != 0L)
         {
            jjmatchedKind = 128;
            jjmatchedPos = 8;
         }
         else if ((active2 & 0x4L) != 0L)
         {
            jjmatchedKind = 130;
            jjmatchedPos = 8;
         }
         return jjMoveStringLiteralDfa9_0(active1, 0L, active2, 0x800000000240L);
      case 104:
         return jjMoveStringLiteralDfa9_0(active1, 0L, active2, 0x1000000000000L);
      case 105:
         return jjMoveStringLiteralDfa9_0(active1, 0L, active2, 0x6000000004000L);
      case 108:
         return jjMoveStringLiteralDfa9_0(active1, 0L, active2, 0x40000000500100L);
      case 109:
         return jjMoveStringLiteralDfa9_0(active1, 0L, active2, 0x18000000000000L);
      case 110:
         return jjMoveStringLiteralDfa9_0(active1, 0L, active2, 0x2080L);
      case 111:
         return jjMoveStringLiteralDfa9_0(active1, 0L, active2, 0x20000000800000L);
      case 112:
         if ((active2 & 0x400000000000L) != 0L)
         {
            jjmatchedKind = 174;
            jjmatchedPos = 8;
         }
         return jjMoveStringLiteralDfa9_0(active1, 0L, active2, 0x200000L);
      case 114:
         if ((active2 & 0x2L) != 0L)
         {
            jjmatchedKind = 129;
            jjmatchedPos = 8;
         }
         break;
      case 115:
         return jjMoveStringLiteralDfa9_0(active1, 0L, active2, 0x20000L);
      case 116:
         if ((active1 & 0x8000000000000000L) != 0L)
         {
            jjmatchedKind = 127;
            jjmatchedPos = 8;
         }
         else if ((active2 & 0x20L) != 0L)
         {
            jjmatchedKind = 133;
            jjmatchedPos = 8;
         }
         return jjMoveStringLiteralDfa9_0(active1, 0L, active2, 0xa00000000000000L);
      case 120:
         if ((active2 & 0x8000L) != 0L)
         {
            jjmatchedKind = 143;
            jjmatchedPos = 8;
         }
         break;
      case 121:
         if ((active2 & 0x8L) != 0L)
         {
            jjmatchedKind = 131;
            jjmatchedPos = 8;
         }
         else if ((active2 & 0x10L) != 0L)
         {
            jjmatchedKind = 132;
            jjmatchedPos = 8;
         }
         else if ((active2 & 0x200000000000L) != 0L)
         {
            jjmatchedKind = 173;
            jjmatchedPos = 8;
         }
         return jjMoveStringLiteralDfa9_0(active1, 0L, active2, 0x40000L);
      default :
         break;
   }
   return jjMoveNfa_0(5, 8);
}
private final int jjMoveStringLiteralDfa9_0(long old1, long active1, long old2, long active2)
{
   if (((active1 &= old1) | (active2 &= old2)) == 0L)
      return jjMoveNfa_0(5, 8);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(5, 8);
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa10_0(active2, 0x401000000000000L);
      case 66:
         return jjMoveStringLiteralDfa10_0(active2, 0x80000000000000L);
      case 67:
         return jjMoveStringLiteralDfa10_0(active2, 0x800000000000L);
      case 69:
         if ((active2 & 0x100L) != 0L)
         {
            jjmatchedKind = 136;
            jjmatchedPos = 9;
         }
         else if ((active2 & 0x2000L) != 0L)
         {
            jjmatchedKind = 141;
            jjmatchedPos = 9;
         }
         return jjMoveStringLiteralDfa10_0(active2, 0x40000000000000L);
      case 73:
         return jjMoveStringLiteralDfa10_0(active2, 0xa18000000000000L);
      case 77:
         return jjMoveStringLiteralDfa10_0(active2, 0x20000000800000L);
      case 78:
         return jjMoveStringLiteralDfa10_0(active2, 0x2000000000000L);
      case 79:
         return jjMoveStringLiteralDfa10_0(active2, 0x4000000200000L);
      case 83:
         if ((active2 & 0x40L) != 0L)
         {
            jjmatchedKind = 134;
            jjmatchedPos = 9;
         }
         else if ((active2 & 0x200L) != 0L)
         {
            jjmatchedKind = 137;
            jjmatchedPos = 9;
         }
         return jjMoveStringLiteralDfa10_0(active2, 0x84000L);
      case 84:
         if ((active2 & 0x80L) != 0L)
         {
            jjmatchedKind = 135;
            jjmatchedPos = 9;
         }
         return jjMoveStringLiteralDfa10_0(active2, 0x20000L);
      case 95:
         return jjMoveStringLiteralDfa10_0(active2, 0x540000L);
      case 97:
         return jjMoveStringLiteralDfa10_0(active2, 0x401000000000000L);
      case 98:
         return jjMoveStringLiteralDfa10_0(active2, 0x80000000000000L);
      case 99:
         return jjMoveStringLiteralDfa10_0(active2, 0x800000000000L);
      case 101:
         if ((active2 & 0x100L) != 0L)
         {
            jjmatchedKind = 136;
            jjmatchedPos = 9;
         }
         else if ((active2 & 0x2000L) != 0L)
         {
            jjmatchedKind = 141;
            jjmatchedPos = 9;
         }
         return jjMoveStringLiteralDfa10_0(active2, 0x40000000000000L);
      case 105:
         return jjMoveStringLiteralDfa10_0(active2, 0xa18000000000000L);
      case 109:
         return jjMoveStringLiteralDfa10_0(active2, 0x20000000800000L);
      case 110:
         return jjMoveStringLiteralDfa10_0(active2, 0x2000000000000L);
      case 111:
         return jjMoveStringLiteralDfa10_0(active2, 0x4000000200000L);
      case 115:
         if ((active2 & 0x40L) != 0L)
         {
            jjmatchedKind = 134;
            jjmatchedPos = 9;
         }
         else if ((active2 & 0x200L) != 0L)
         {
            jjmatchedKind = 137;
            jjmatchedPos = 9;
         }
         return jjMoveStringLiteralDfa10_0(active2, 0x84000L);
      case 116:
         if ((active2 & 0x80L) != 0L)
         {
            jjmatchedKind = 135;
            jjmatchedPos = 9;
         }
         return jjMoveStringLiteralDfa10_0(active2, 0x20000L);
      default :
         break;
   }
   return jjMoveNfa_0(5, 9);
}
private final int jjMoveStringLiteralDfa10_0(long old2, long active2)
{
   if (((active2 &= old2)) == 0L)
      return jjMoveNfa_0(5, 9);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(5, 9);
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa11_0(active2, 0x40000000000000L);
      case 65:
         return jjMoveStringLiteralDfa11_0(active2, 0x2000000000000L);
      case 68:
         return jjMoveStringLiteralDfa11_0(active2, 0x400000L);
      case 76:
         return jjMoveStringLiteralDfa11_0(active2, 0x80000000000000L);
      case 77:
         return jjMoveStringLiteralDfa11_0(active2, 0xa20000000000000L);
      case 78:
         return jjMoveStringLiteralDfa11_0(active2, 0x4000000000000L);
      case 80:
         return jjMoveStringLiteralDfa11_0(active2, 0x800000L);
      case 82:
         if ((active2 & 0x1000000000000L) != 0L)
         {
            jjmatchedKind = 176;
            jjmatchedPos = 10;
         }
         return jjMoveStringLiteralDfa11_0(active2, 0x20000L);
      case 83:
         return jjMoveStringLiteralDfa11_0(active2, 0x340000L);
      case 84:
         if ((active2 & 0x4000L) != 0L)
         {
            jjmatchedKind = 142;
            jjmatchedPos = 10;
         }
         else if ((active2 & 0x800000000000L) != 0L)
         {
            jjmatchedKind = 175;
            jjmatchedPos = 10;
         }
         else if ((active2 & 0x8000000000000L) != 0L)
         {
            jjmatchedKind = 179;
            jjmatchedPos = 10;
         }
         return jjMoveStringLiteralDfa11_0(active2, 0x410000000080000L);
      case 97:
         return jjMoveStringLiteralDfa11_0(active2, 0x2000000000000L);
      case 100:
         return jjMoveStringLiteralDfa11_0(active2, 0x400000L);
      case 108:
         return jjMoveStringLiteralDfa11_0(active2, 0x80000000000000L);
      case 109:
         return jjMoveStringLiteralDfa11_0(active2, 0xa20000000000000L);
      case 110:
         return jjMoveStringLiteralDfa11_0(active2, 0x4000000000000L);
      case 112:
         return jjMoveStringLiteralDfa11_0(active2, 0x800000L);
      case 114:
         if ((active2 & 0x1000000000000L) != 0L)
         {
            jjmatchedKind = 176;
            jjmatchedPos = 10;
         }
         return jjMoveStringLiteralDfa11_0(active2, 0x20000L);
      case 115:
         return jjMoveStringLiteralDfa11_0(active2, 0x340000L);
      case 116:
         if ((active2 & 0x4000L) != 0L)
         {
            jjmatchedKind = 142;
            jjmatchedPos = 10;
         }
         else if ((active2 & 0x800000000000L) != 0L)
         {
            jjmatchedKind = 175;
            jjmatchedPos = 10;
         }
         else if ((active2 & 0x8000000000000L) != 0L)
         {
            jjmatchedKind = 179;
            jjmatchedPos = 10;
         }
         return jjMoveStringLiteralDfa11_0(active2, 0x410000000080000L);
      default :
         break;
   }
   return jjMoveNfa_0(5, 10);
}
private final int jjMoveStringLiteralDfa11_0(long old2, long active2)
{
   if (((active2 &= old2)) == 0L)
      return jjMoveNfa_0(5, 10);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(5, 10);
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa12_0(active2, 0x4000000000000L);
      case 69:
         if ((active2 & 0x80000000000000L) != 0L)
         {
            jjmatchedKind = 183;
            jjmatchedPos = 11;
         }
         else if ((active2 & 0x200000000000000L) != 0L)
         {
            jjmatchedKind = 185;
            jjmatchedPos = 11;
         }
         else if ((active2 & 0x400000000000000L) != 0L)
         {
            jjmatchedKind = 186;
            jjmatchedPos = 11;
         }
         return jjMoveStringLiteralDfa12_0(active2, 0x800000000420000L);
      case 73:
         return jjMoveStringLiteralDfa12_0(active2, 0x20000000200000L);
      case 79:
         return jjMoveStringLiteralDfa12_0(active2, 0x800000L);
      case 82:
         return jjMoveStringLiteralDfa12_0(active2, 0x42000000080000L);
      case 84:
         return jjMoveStringLiteralDfa12_0(active2, 0x10000000140000L);
      case 101:
         if ((active2 & 0x80000000000000L) != 0L)
         {
            jjmatchedKind = 183;
            jjmatchedPos = 11;
         }
         else if ((active2 & 0x200000000000000L) != 0L)
         {
            jjmatchedKind = 185;
            jjmatchedPos = 11;
         }
         else if ((active2 & 0x400000000000000L) != 0L)
         {
            jjmatchedKind = 186;
            jjmatchedPos = 11;
         }
         return jjMoveStringLiteralDfa12_0(active2, 0x800000000420000L);
      case 105:
         return jjMoveStringLiteralDfa12_0(active2, 0x20000000200000L);
      case 111:
         return jjMoveStringLiteralDfa12_0(active2, 0x800000L);
      case 114:
         return jjMoveStringLiteralDfa12_0(active2, 0x42000000080000L);
      case 116:
         return jjMoveStringLiteralDfa12_0(active2, 0x10000000140000L);
      default :
         break;
   }
   return jjMoveNfa_0(5, 11);
}
private final int jjMoveStringLiteralDfa12_0(long old2, long active2)
{
   if (((active2 &= old2)) == 0L)
      return jjMoveNfa_0(5, 11);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(5, 11);
   }
   switch(curChar)
   {
      case 67:
         return jjMoveStringLiteralDfa13_0(active2, 0x400000L);
      case 69:
         return jjMoveStringLiteralDfa13_0(active2, 0x50000000080000L);
      case 73:
         return jjMoveStringLiteralDfa13_0(active2, 0x4000000000000L);
      case 78:
         return jjMoveStringLiteralDfa13_0(active2, 0x20000L);
      case 82:
         return jjMoveStringLiteralDfa13_0(active2, 0x140000L);
      case 83:
         return jjMoveStringLiteralDfa13_0(active2, 0x800000000800000L);
      case 84:
         return jjMoveStringLiteralDfa13_0(active2, 0x20000000200000L);
      case 89:
         if ((active2 & 0x2000000000000L) != 0L)
         {
            jjmatchedKind = 177;
            jjmatchedPos = 12;
         }
         break;
      case 99:
         return jjMoveStringLiteralDfa13_0(active2, 0x400000L);
      case 101:
         return jjMoveStringLiteralDfa13_0(active2, 0x50000000080000L);
      case 105:
         return jjMoveStringLiteralDfa13_0(active2, 0x4000000000000L);
      case 110:
         return jjMoveStringLiteralDfa13_0(active2, 0x20000L);
      case 114:
         return jjMoveStringLiteralDfa13_0(active2, 0x140000L);
      case 115:
         return jjMoveStringLiteralDfa13_0(active2, 0x800000000800000L);
      case 116:
         return jjMoveStringLiteralDfa13_0(active2, 0x20000000200000L);
      case 121:
         if ((active2 & 0x2000000000000L) != 0L)
         {
            jjmatchedKind = 177;
            jjmatchedPos = 12;
         }
         break;
      default :
         break;
   }
   return jjMoveNfa_0(5, 12);
}
private final int jjMoveStringLiteralDfa13_0(long old2, long active2)
{
   if (((active2 &= old2)) == 0L)
      return jjMoveNfa_0(5, 12);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(5, 12);
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa14_0(active2, 0x40000000000000L);
      case 68:
         if ((active2 & 0x10000000000000L) != 0L)
         {
            jjmatchedKind = 180;
            jjmatchedPos = 13;
         }
         break;
      case 69:
         return jjMoveStringLiteralDfa14_0(active2, 0x140000L);
      case 71:
         return jjMoveStringLiteralDfa14_0(active2, 0x20000L);
      case 73:
         return jjMoveStringLiteralDfa14_0(active2, 0xa00000L);
      case 78:
         return jjMoveStringLiteralDfa14_0(active2, 0x80000L);
      case 79:
         return jjMoveStringLiteralDfa14_0(active2, 0x400000L);
      case 83:
         return jjMoveStringLiteralDfa14_0(active2, 0x4000000000000L);
      case 84:
         return jjMoveStringLiteralDfa14_0(active2, 0x820000000000000L);
      case 97:
         return jjMoveStringLiteralDfa14_0(active2, 0x40000000000000L);
      case 100:
         if ((active2 & 0x10000000000000L) != 0L)
         {
            jjmatchedKind = 180;
            jjmatchedPos = 13;
         }
         break;
      case 101:
         return jjMoveStringLiteralDfa14_0(active2, 0x140000L);
      case 103:
         return jjMoveStringLiteralDfa14_0(active2, 0x20000L);
      case 105:
         return jjMoveStringLiteralDfa14_0(active2, 0xa00000L);
      case 110:
         return jjMoveStringLiteralDfa14_0(active2, 0x80000L);
      case 111:
         return jjMoveStringLiteralDfa14_0(active2, 0x400000L);
      case 115:
         return jjMoveStringLiteralDfa14_0(active2, 0x4000000000000L);
      case 116:
         return jjMoveStringLiteralDfa14_0(active2, 0x820000000000000L);
      default :
         break;
   }
   return jjMoveNfa_0(5, 13);
}
private final int jjMoveStringLiteralDfa14_0(long old2, long active2)
{
   if (((active2 &= old2)) == 0L)
      return jjMoveNfa_0(5, 13);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(5, 13);
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa15_0(active2, 0x800000000000000L);
      case 68:
         if ((active2 & 0x40000000000000L) != 0L)
         {
            jjmatchedKind = 182;
            jjmatchedPos = 14;
         }
         break;
      case 69:
         return jjMoveStringLiteralDfa15_0(active2, 0x20000000000000L);
      case 71:
         return jjMoveStringLiteralDfa15_0(active2, 0x80000L);
      case 77:
         return jjMoveStringLiteralDfa15_0(active2, 0x400000L);
      case 78:
         return jjMoveStringLiteralDfa15_0(active2, 0x140000L);
      case 79:
         return jjMoveStringLiteralDfa15_0(active2, 0x4000000200000L);
      case 84:
         return jjMoveStringLiteralDfa15_0(active2, 0x820000L);
      case 97:
         return jjMoveStringLiteralDfa15_0(active2, 0x800000000000000L);
      case 100:
         if ((active2 & 0x40000000000000L) != 0L)
         {
            jjmatchedKind = 182;
            jjmatchedPos = 14;
         }
         break;
      case 101:
         return jjMoveStringLiteralDfa15_0(active2, 0x20000000000000L);
      case 103:
         return jjMoveStringLiteralDfa15_0(active2, 0x80000L);
      case 109:
         return jjMoveStringLiteralDfa15_0(active2, 0x400000L);
      case 110:
         return jjMoveStringLiteralDfa15_0(active2, 0x140000L);
      case 111:
         return jjMoveStringLiteralDfa15_0(active2, 0x4000000200000L);
      case 116:
         return jjMoveStringLiteralDfa15_0(active2, 0x820000L);
      default :
         break;
   }
   return jjMoveNfa_0(5, 14);
}
private final int jjMoveStringLiteralDfa15_0(long old2, long active2)
{
   if (((active2 &= old2)) == 0L)
      return jjMoveNfa_0(5, 14);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(5, 14);
   }
   switch(curChar)
   {
      case 68:
         if ((active2 & 0x20000000000000L) != 0L)
         {
            jjmatchedKind = 181;
            jjmatchedPos = 15;
         }
         break;
      case 71:
         return jjMoveStringLiteralDfa16_0(active2, 0x140000L);
      case 72:
         if ((active2 & 0x20000L) != 0L)
         {
            jjmatchedKind = 145;
            jjmatchedPos = 15;
         }
         break;
      case 73:
         return jjMoveStringLiteralDfa16_0(active2, 0x800000L);
      case 76:
         return jjMoveStringLiteralDfa16_0(active2, 0x4000000000000L);
      case 77:
         return jjMoveStringLiteralDfa16_0(active2, 0x800000000000000L);
      case 78:
         if ((active2 & 0x200000L) != 0L)
         {
            jjmatchedKind = 149;
            jjmatchedPos = 15;
         }
         break;
      case 80:
         return jjMoveStringLiteralDfa16_0(active2, 0x400000L);
      case 84:
         return jjMoveStringLiteralDfa16_0(active2, 0x80000L);
      case 100:
         if ((active2 & 0x20000000000000L) != 0L)
         {
            jjmatchedKind = 181;
            jjmatchedPos = 15;
         }
         break;
      case 103:
         return jjMoveStringLiteralDfa16_0(active2, 0x140000L);
      case 104:
         if ((active2 & 0x20000L) != 0L)
         {
            jjmatchedKind = 145;
            jjmatchedPos = 15;
         }
         break;
      case 105:
         return jjMoveStringLiteralDfa16_0(active2, 0x800000L);
      case 108:
         return jjMoveStringLiteralDfa16_0(active2, 0x4000000000000L);
      case 109:
         return jjMoveStringLiteralDfa16_0(active2, 0x800000000000000L);
      case 110:
         if ((active2 & 0x200000L) != 0L)
         {
            jjmatchedKind = 149;
            jjmatchedPos = 15;
         }
         break;
      case 112:
         return jjMoveStringLiteralDfa16_0(active2, 0x400000L);
      case 116:
         return jjMoveStringLiteralDfa16_0(active2, 0x80000L);
      default :
         break;
   }
   return jjMoveNfa_0(5, 15);
}
private final int jjMoveStringLiteralDfa16_0(long old2, long active2)
{
   if (((active2 &= old2)) == 0L)
      return jjMoveNfa_0(5, 15);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(5, 15);
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa17_0(active2, 0x4000000000000L);
      case 72:
         if ((active2 & 0x80000L) != 0L)
         {
            jjmatchedKind = 147;
            jjmatchedPos = 16;
         }
         break;
      case 79:
         return jjMoveStringLiteralDfa17_0(active2, 0xc00000L);
      case 80:
         if ((active2 & 0x800000000000000L) != 0L)
         {
            jjmatchedKind = 187;
            jjmatchedPos = 16;
         }
         break;
      case 84:
         return jjMoveStringLiteralDfa17_0(active2, 0x140000L);
      case 97:
         return jjMoveStringLiteralDfa17_0(active2, 0x4000000000000L);
      case 104:
         if ((active2 & 0x80000L) != 0L)
         {
            jjmatchedKind = 147;
            jjmatchedPos = 16;
         }
         break;
      case 111:
         return jjMoveStringLiteralDfa17_0(active2, 0xc00000L);
      case 112:
         if ((active2 & 0x800000000000000L) != 0L)
         {
            jjmatchedKind = 187;
            jjmatchedPos = 16;
         }
         break;
      case 116:
         return jjMoveStringLiteralDfa17_0(active2, 0x140000L);
      default :
         break;
   }
   return jjMoveNfa_0(5, 16);
}
private final int jjMoveStringLiteralDfa17_0(long old2, long active2)
{
   if (((active2 &= old2)) == 0L)
      return jjMoveNfa_0(5, 16);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(5, 16);
   }
   switch(curChar)
   {
      case 72:
         if ((active2 & 0x40000L) != 0L)
         {
            jjmatchedKind = 146;
            jjmatchedPos = 17;
         }
         else if ((active2 & 0x100000L) != 0L)
         {
            jjmatchedKind = 148;
            jjmatchedPos = 17;
         }
         break;
      case 78:
         if ((active2 & 0x800000L) != 0L)
         {
            jjmatchedKind = 151;
            jjmatchedPos = 17;
         }
         break;
      case 83:
         return jjMoveStringLiteralDfa18_0(active2, 0x400000L);
      case 84:
         return jjMoveStringLiteralDfa18_0(active2, 0x4000000000000L);
      case 104:
         if ((active2 & 0x40000L) != 0L)
         {
            jjmatchedKind = 146;
            jjmatchedPos = 17;
         }
         else if ((active2 & 0x100000L) != 0L)
         {
            jjmatchedKind = 148;
            jjmatchedPos = 17;
         }
         break;
      case 110:
         if ((active2 & 0x800000L) != 0L)
         {
            jjmatchedKind = 151;
            jjmatchedPos = 17;
         }
         break;
      case 115:
         return jjMoveStringLiteralDfa18_0(active2, 0x400000L);
      case 116:
         return jjMoveStringLiteralDfa18_0(active2, 0x4000000000000L);
      default :
         break;
   }
   return jjMoveNfa_0(5, 17);
}
private final int jjMoveStringLiteralDfa18_0(long old2, long active2)
{
   if (((active2 &= old2)) == 0L)
      return jjMoveNfa_0(5, 17);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(5, 17);
   }
   switch(curChar)
   {
      case 73:
         return jjMoveStringLiteralDfa19_0(active2, 0x4000000400000L);
      case 105:
         return jjMoveStringLiteralDfa19_0(active2, 0x4000000400000L);
      default :
         break;
   }
   return jjMoveNfa_0(5, 18);
}
private final int jjMoveStringLiteralDfa19_0(long old2, long active2)
{
   if (((active2 &= old2)) == 0L)
      return jjMoveNfa_0(5, 18);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(5, 18);
   }
   switch(curChar)
   {
      case 79:
         return jjMoveStringLiteralDfa20_0(active2, 0x4000000000000L);
      case 84:
         return jjMoveStringLiteralDfa20_0(active2, 0x400000L);
      case 111:
         return jjMoveStringLiteralDfa20_0(active2, 0x4000000000000L);
      case 116:
         return jjMoveStringLiteralDfa20_0(active2, 0x400000L);
      default :
         break;
   }
   return jjMoveNfa_0(5, 19);
}
private final int jjMoveStringLiteralDfa20_0(long old2, long active2)
{
   if (((active2 &= old2)) == 0L)
      return jjMoveNfa_0(5, 19);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(5, 19);
   }
   switch(curChar)
   {
      case 73:
         return jjMoveStringLiteralDfa21_0(active2, 0x400000L);
      case 78:
         return jjMoveStringLiteralDfa21_0(active2, 0x4000000000000L);
      case 105:
         return jjMoveStringLiteralDfa21_0(active2, 0x400000L);
      case 110:
         return jjMoveStringLiteralDfa21_0(active2, 0x4000000000000L);
      default :
         break;
   }
   return jjMoveNfa_0(5, 20);
}
private final int jjMoveStringLiteralDfa21_0(long old2, long active2)
{
   if (((active2 &= old2)) == 0L)
      return jjMoveNfa_0(5, 20);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(5, 20);
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa22_0(active2, 0x4000000000000L);
      case 79:
         return jjMoveStringLiteralDfa22_0(active2, 0x400000L);
      case 111:
         return jjMoveStringLiteralDfa22_0(active2, 0x400000L);
      default :
         break;
   }
   return jjMoveNfa_0(5, 21);
}
private final int jjMoveStringLiteralDfa22_0(long old2, long active2)
{
   if (((active2 &= old2)) == 0L)
      return jjMoveNfa_0(5, 21);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(5, 21);
   }
   switch(curChar)
   {
      case 76:
         return jjMoveStringLiteralDfa23_0(active2, 0x4000000000000L);
      case 78:
         if ((active2 & 0x400000L) != 0L)
         {
            jjmatchedKind = 150;
            jjmatchedPos = 22;
         }
         break;
      case 108:
         return jjMoveStringLiteralDfa23_0(active2, 0x4000000000000L);
      case 110:
         if ((active2 & 0x400000L) != 0L)
         {
            jjmatchedKind = 150;
            jjmatchedPos = 22;
         }
         break;
      default :
         break;
   }
   return jjMoveNfa_0(5, 22);
}
private final int jjMoveStringLiteralDfa23_0(long old2, long active2)
{
   if (((active2 &= old2)) == 0L)
      return jjMoveNfa_0(5, 22);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(5, 22);
   }
   switch(curChar)
   {
      case 69:
         return jjMoveStringLiteralDfa24_0(active2, 0x4000000000000L);
      case 101:
         return jjMoveStringLiteralDfa24_0(active2, 0x4000000000000L);
      default :
         break;
   }
   return jjMoveNfa_0(5, 23);
}
private final int jjMoveStringLiteralDfa24_0(long old2, long active2)
{
   if (((active2 &= old2)) == 0L)
      return jjMoveNfa_0(5, 23);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(5, 23);
   }
   switch(curChar)
   {
      case 86:
         return jjMoveStringLiteralDfa25_0(active2, 0x4000000000000L);
      case 118:
         return jjMoveStringLiteralDfa25_0(active2, 0x4000000000000L);
      default :
         break;
   }
   return jjMoveNfa_0(5, 24);
}
private final int jjMoveStringLiteralDfa25_0(long old2, long active2)
{
   if (((active2 &= old2)) == 0L)
      return jjMoveNfa_0(5, 24);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(5, 24);
   }
   switch(curChar)
   {
      case 69:
         return jjMoveStringLiteralDfa26_0(active2, 0x4000000000000L);
      case 101:
         return jjMoveStringLiteralDfa26_0(active2, 0x4000000000000L);
      default :
         break;
   }
   return jjMoveNfa_0(5, 25);
}
private final int jjMoveStringLiteralDfa26_0(long old2, long active2)
{
   if (((active2 &= old2)) == 0L)
      return jjMoveNfa_0(5, 25);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(5, 25);
   }
   switch(curChar)
   {
      case 76:
         if ((active2 & 0x4000000000000L) != 0L)
         {
            jjmatchedKind = 178;
            jjmatchedPos = 26;
         }
         break;
      case 108:
         if ((active2 & 0x4000000000000L) != 0L)
         {
            jjmatchedKind = 178;
            jjmatchedPos = 26;
         }
         break;
      default :
         break;
   }
   return jjMoveNfa_0(5, 26);
}
private final void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private final void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private final void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}
private final void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}
private final void jjCheckNAddStates(int start)
{
   jjCheckNAdd(jjnextStates[start]);
   jjCheckNAdd(jjnextStates[start + 1]);
}
static final long[] jjbitVec0 = {
   0xfffffffffffffffeL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec2 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
private final int jjMoveNfa_0(int startState, int curPos)
{
   int strKind = jjmatchedKind;
   int strPos = jjmatchedPos;
   int seenUpto;
   input_stream.backup(seenUpto = curPos + 1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { throw new Error("Internal Error"); }
   curPos = 0;
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 84;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 5:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 194)
                        kind = 194;
                     jjCheckNAddStates(0, 2);
                  }
                  else if (curChar == 34)
                     jjCheckNAddStates(3, 8);
                  else if (curChar == 39)
                     jjCheckNAddStates(9, 12);
                  else if (curChar == 46)
                     jjCheckNAdd(42);
                  else if (curChar == 60)
                     jjstateSet[jjnewStateCnt++] = 14;
                  else if (curChar == 33)
                     jjstateSet[jjnewStateCnt++] = 12;
                  else if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 6;
                  else if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 0;
                  break;
               case 0:
                  if (curChar == 47)
                     jjCheckNAddStates(13, 15);
                  break;
               case 1:
                  if ((0xffffffffffffdbffL & l) != 0L)
                     jjCheckNAddStates(13, 15);
                  break;
               case 2:
                  if ((0x2400L & l) != 0L && kind > 5)
                     kind = 5;
                  break;
               case 3:
                  if (curChar == 10 && kind > 5)
                     kind = 5;
                  break;
               case 4:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 6:
                  if (curChar == 45)
                     jjCheckNAddStates(16, 18);
                  break;
               case 7:
                  if ((0xffffffffffffdbffL & l) != 0L)
                     jjCheckNAddStates(16, 18);
                  break;
               case 8:
                  if ((0x2400L & l) != 0L && kind > 6)
                     kind = 6;
                  break;
               case 9:
                  if (curChar == 10 && kind > 6)
                     kind = 6;
                  break;
               case 10:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 9;
                  break;
               case 11:
                  if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 6;
                  break;
               case 12:
                  if (curChar == 61 && kind > 14)
                     kind = 14;
                  break;
               case 13:
                  if (curChar == 33)
                     jjstateSet[jjnewStateCnt++] = 12;
                  break;
               case 14:
                  if (curChar == 62 && kind > 14)
                     kind = 14;
                  break;
               case 15:
                  if (curChar == 60)
                     jjstateSet[jjnewStateCnt++] = 14;
                  break;
               case 24:
                  if (curChar == 47)
                     jjCheckNAddStates(19, 21);
                  break;
               case 25:
                  if ((0xffff7fffffffdbffL & l) != 0L)
                     jjCheckNAddStates(19, 21);
                  break;
               case 27:
                  if (curChar != 47)
                     break;
                  if (kind > 21)
                     kind = 21;
                  jjstateSet[jjnewStateCnt++] = 28;
                  break;
               case 29:
                  if (curChar == 32)
                     jjstateSet[jjnewStateCnt++] = 24;
                  break;
               case 35:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 194)
                     kind = 194;
                  jjCheckNAddStates(0, 2);
                  break;
               case 36:
                  if (curChar == 46)
                     jjCheckNAdd(37);
                  break;
               case 37:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 194)
                     kind = 194;
                  jjCheckNAddTwoStates(37, 38);
                  break;
               case 39:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(40);
                  break;
               case 40:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 194)
                     kind = 194;
                  jjCheckNAdd(40);
                  break;
               case 41:
                  if (curChar == 46)
                     jjCheckNAdd(42);
                  break;
               case 42:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 194)
                     kind = 194;
                  jjCheckNAddTwoStates(42, 38);
                  break;
               case 43:
               case 44:
                  if (curChar == 39)
                     jjCheckNAddStates(9, 12);
                  break;
               case 45:
                  if (curChar == 39)
                     jjstateSet[jjnewStateCnt++] = 44;
                  break;
               case 47:
                  if ((0xa000000000L & l) != 0L)
                     jjCheckNAddStates(9, 12);
                  break;
               case 48:
                  if ((0xffffff7fffffffffL & l) != 0L)
                     jjCheckNAddStates(9, 12);
                  break;
               case 49:
                  if (curChar == 39 && kind > 195)
                     kind = 195;
                  break;
               case 50:
                  if (curChar == 34)
                     jjCheckNAddStates(3, 8);
                  break;
               case 51:
                  if ((0xfffffffbffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(51, 52);
                  break;
               case 52:
                  if (curChar == 34 && kind > 196)
                     kind = 196;
                  break;
               case 53:
                  if ((0xfffffffbffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(53, 54);
                  break;
               case 54:
                  if (curChar != 34)
                     break;
                  if (kind > 199)
                     kind = 199;
                  jjstateSet[jjnewStateCnt++] = 55;
                  break;
               case 55:
                  if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 56;
                  break;
               case 56:
                  if (curChar == 34)
                     jjCheckNAddTwoStates(57, 54);
                  break;
               case 57:
                  if ((0xfffffffbffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(57, 54);
                  break;
               case 58:
                  if ((0xfffffffbffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(58, 59);
                  break;
               case 59:
                  if (curChar == 34)
                     jjAddStates(22, 23);
                  break;
               case 60:
                  if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 61;
                  break;
               case 61:
                  if (curChar == 34)
                     jjCheckNAddTwoStates(62, 59);
                  break;
               case 62:
                  if ((0xfffffffbffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(62, 59);
                  break;
               case 63:
                  if (curChar == 42 && kind > 203)
                     kind = 203;
                  break;
               case 64:
                  if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 63;
                  break;
               case 66:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 197)
                     kind = 197;
                  jjstateSet[jjnewStateCnt++] = 66;
                  break;
               case 67:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 198)
                     kind = 198;
                  jjCheckNAddTwoStates(67, 68);
                  break;
               case 68:
                  if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 69;
                  break;
               case 70:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 198)
                     kind = 198;
                  jjCheckNAddTwoStates(68, 70);
                  break;
               case 71:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(24, 26);
                  break;
               case 72:
                  if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 73;
                  break;
               case 74:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(27, 29);
                  break;
               case 77:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 201)
                     kind = 201;
                  jjstateSet[jjnewStateCnt++] = 77;
                  break;
               case 78:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(30, 32);
                  break;
               case 79:
                  if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 80;
                  break;
               case 81:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(33, 35);
                  break;
               case 82:
                  if (curChar == 42 && kind > 202)
                     kind = 202;
                  break;
               case 83:
                  if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 82;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 5:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 197)
                        kind = 197;
                     jjCheckNAddStates(36, 45);
                  }
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 33;
                  else if ((0x4000000040L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 22;
                  else if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 18;
                  break;
               case 1:
                  jjAddStates(13, 15);
                  break;
               case 7:
                  jjAddStates(16, 18);
                  break;
               case 16:
                  if ((0x2000000020L & l) != 0L && kind > 19)
                     kind = 19;
                  break;
               case 17:
                  if ((0x20000000200000L & l) != 0L)
                     jjCheckNAdd(16);
                  break;
               case 18:
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 17;
                  break;
               case 19:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 18;
                  break;
               case 20:
                  if ((0x8000000080000L & l) != 0L)
                     jjCheckNAdd(16);
                  break;
               case 21:
                  if ((0x100000001000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 20;
                  break;
               case 22:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 21;
                  break;
               case 23:
                  if ((0x4000000040L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 22;
                  break;
               case 25:
                  jjAddStates(19, 21);
                  break;
               case 26:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 24;
                  break;
               case 28:
                  if ((0x8220000082200L & l) == 0L)
                     break;
                  if (kind > 21)
                     kind = 21;
                  jjstateSet[jjnewStateCnt++] = 28;
                  break;
               case 30:
                  if ((0x100000001000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 29;
                  break;
               case 31:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 30;
                  break;
               case 32:
                  if ((0x8000000080L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 31;
                  break;
               case 33:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 32;
                  break;
               case 34:
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 33;
                  break;
               case 38:
                  if (curChar == 69)
                     jjAddStates(46, 47);
                  break;
               case 46:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 47;
                  break;
               case 47:
                  if ((0x7fffffe90000000L & l) != 0L)
                     jjCheckNAddStates(9, 12);
                  break;
               case 48:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAddStates(9, 12);
                  break;
               case 51:
                  jjAddStates(48, 49);
                  break;
               case 53:
                  jjCheckNAddTwoStates(53, 54);
                  break;
               case 57:
                  jjCheckNAddTwoStates(57, 54);
                  break;
               case 58:
                  jjCheckNAddTwoStates(58, 59);
                  break;
               case 62:
                  jjCheckNAddTwoStates(62, 59);
                  break;
               case 65:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 197)
                     kind = 197;
                  jjCheckNAddStates(36, 45);
                  break;
               case 66:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 197)
                     kind = 197;
                  jjCheckNAdd(66);
                  break;
               case 67:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 198)
                     kind = 198;
                  jjCheckNAddTwoStates(67, 68);
                  break;
               case 69:
               case 70:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 198)
                     kind = 198;
                  jjCheckNAddTwoStates(68, 70);
                  break;
               case 71:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddStates(24, 26);
                  break;
               case 73:
               case 74:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddStates(27, 29);
                  break;
               case 75:
                  if (curChar == 93 && kind > 200)
                     kind = 200;
                  break;
               case 76:
                  if (curChar == 91)
                     jjstateSet[jjnewStateCnt++] = 75;
                  break;
               case 77:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 201)
                     kind = 201;
                  jjCheckNAdd(77);
                  break;
               case 78:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddStates(30, 32);
                  break;
               case 80:
               case 81:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddStates(33, 35);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjAddStates(13, 15);
                  break;
               case 7:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjAddStates(16, 18);
                  break;
               case 25:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjAddStates(19, 21);
                  break;
               case 48:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjAddStates(9, 12);
                  break;
               case 51:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjAddStates(48, 49);
                  break;
               case 53:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(53, 54);
                  break;
               case 57:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(57, 54);
                  break;
               case 58:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(58, 59);
                  break;
               case 62:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(62, 59);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 84 - (jjnewStateCnt = startsAt)))
         break;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { break; }
   }
   if (jjmatchedPos > strPos)
      return curPos;

   int toRet = Math.max(curPos, seenUpto);

   if (curPos < toRet)
      for (i = toRet - Math.min(curPos, seenUpto); i-- > 0; )
         try { curChar = input_stream.readChar(); }
         catch(java.io.IOException e) { throw new Error("Internal Error : Please send a bug report."); }

   if (jjmatchedPos < strPos)
   {
      jjmatchedKind = strKind;
      jjmatchedPos = strPos;
   }
   else if (jjmatchedPos == strPos && jjmatchedKind > strKind)
      jjmatchedKind = strKind;

   return toRet;
}
static final int[] jjnextStates = {
   35, 36, 38, 51, 52, 53, 54, 58, 59, 45, 46, 48, 49, 1, 2, 4, 
   7, 8, 10, 25, 26, 27, 60, 64, 71, 72, 76, 72, 74, 76, 78, 79, 
   83, 79, 81, 83, 66, 67, 68, 71, 72, 76, 77, 78, 79, 83, 39, 40, 
   51, 52, 
};
private static final boolean jjCanMove_0(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec2[i2] & l2) != 0L);
      default : 
         if ((jjbitVec0[i1] & l1) != 0L)
            return true;
         return false;
   }
}
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, "\52", "\75", "\75\75", "\76", "\74", 
"\76\75", "\74\75", null, "\57", "\53", "\55", "\174\174", null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, "\77", null, 
null, "\73", "\50", "\51", "\54", };
public static final String[] lexStateNames = {
   "DEFAULT", 
};
static final long[] jjtoToken = {
   0xffffffffffffff81L, 0xffffffffffffffffL, 0xffffffffffffffffL, 0x79fffL, 
};
static final long[] jjtoSkip = {
   0x7eL, 0x0L, 0x0L, 0x0L, 
};
private SimpleCharStream input_stream;
private final int[] jjrounds = new int[84];
private final int[] jjstateSet = new int[168];
protected char curChar;
public SQLTokenManager(SimpleCharStream stream)
{
   if (SimpleCharStream.staticFlag)
      throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
   input_stream = stream;
}
public SQLTokenManager(SimpleCharStream stream, int lexState)
{
   this(stream);
   SwitchTo(lexState);
}
public void ReInit(SimpleCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
private final void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 84; i-- > 0;)
      jjrounds[i] = 0x80000000;
}
public void ReInit(SimpleCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}
public void SwitchTo(int lexState)
{
   if (lexState >= 1 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

private final Token jjFillToken()
{
   Token t = Token.newToken(jjmatchedKind);
   t.kind = jjmatchedKind;
   String im = jjstrLiteralImages[jjmatchedKind];
   t.image = (im == null) ? input_stream.GetImage() : im;
   t.beginLine = input_stream.getBeginLine();
   t.beginColumn = input_stream.getBeginColumn();
   t.endLine = input_stream.getEndLine();
   t.endColumn = input_stream.getEndColumn();
   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

public final Token getNextToken() 
{
  int kind;
  Token specialToken = null;
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {   
   try   
   {     
      curChar = input_stream.BeginToken();
   }     
   catch(java.io.IOException e)
   {        
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      return matchedToken;
   }

   jjmatchedKind = 0x7fffffff;
   jjmatchedPos = 0;
   curPos = jjMoveStringLiteralDfa0_0();
   if (jjmatchedKind != 0x7fffffff)
   {
      if (jjmatchedPos + 1 < curPos)
         input_stream.backup(curPos - jjmatchedPos - 1);
      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
      {
         matchedToken = jjFillToken();
         return matchedToken;
      }
      else
      {
         continue EOFLoop;
      }
   }
   int error_line = input_stream.getEndLine();
   int error_column = input_stream.getEndColumn();
   String error_after = null;
   boolean EOFSeen = false;
   try { input_stream.readChar(); input_stream.backup(1); }
   catch (java.io.IOException e1) {
      EOFSeen = true;
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
      if (curChar == '\n' || curChar == '\r') {
         error_line++;
         error_column = 0;
      }
      else
         error_column++;
   }
   if (!EOFSeen) {
      input_stream.backup(1);
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
   }
   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

}
